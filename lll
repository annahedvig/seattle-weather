{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNksnU0oDGqrd8q2nyjYs7C",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/annahedvig/seattle-weather/blob/master/lll\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 331,
      "metadata": {
        "id": "3wZgYkuwSAz7"
      },
      "outputs": [],
      "source": [
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        "\n",
        "import tensorflow as tf \n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import seaborn as sns\n",
        "sns.set_style('whitegrid')\n",
        "plt.style.use(\"fivethirtyeight\")\n",
        "%matplotlib inline\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.preprocessing.sequence import TimeseriesGenerator\n",
        "from sklearn.preprocessing import MinMaxScaler,StandardScaler"
      ],
      "metadata": {
        "id": "o2z_SfZZSOeb"
      },
      "execution_count": 332,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mpl.rcParams['figure.figsize'] = (10, 8)\n",
        "mpl.rcParams['axes.grid'] = False"
      ],
      "metadata": {
        "id": "sa3qYMyASRnG"
      },
      "execution_count": 333,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Tuning parameters\n",
        "win_length=24\n",
        "batch_size=64\n",
        "num_features=6\n",
        "lookback = 2\n",
        "epochs = 20\n"
      ],
      "metadata": {
        "id": "PbHrFaIEHPq_"
      },
      "execution_count": 334,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/train_SE3_spot_reg_weather_notvols.csv\", sep = ',')\n",
        "df = df.replace(np. nan,0)\n",
        "df['hour'] = df['hour'].map(lambda x: x.lstrip('H'))\n",
        "\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "jbek2CBRSTf_",
        "outputId": "68f20c3f-1f2e-462f-efdc-b32e3c6ba197"
      },
      "execution_count": 335,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              datetime hour  price  regprice  temp  wind  globrad\n",
              "0  2022-01-01 00:00:00    1  46.60     46.60   0.7   2.0      0.0\n",
              "1  2022-01-01 01:00:00    2  41.33     41.33   0.4   2.0      0.0\n",
              "2  2022-01-01 02:00:00    3  42.18     42.18   0.7   3.0      0.0\n",
              "3  2022-01-01 03:00:00    4  44.37     44.37   0.7   5.0      0.0\n",
              "4  2022-01-01 04:00:00    5  37.67     37.67   0.3   5.0      0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c40964e2-ba3f-42f3-a2b3-3787defe82bc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>price</th>\n",
              "      <th>regprice</th>\n",
              "      <th>temp</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-01-01 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>46.60</td>\n",
              "      <td>46.60</td>\n",
              "      <td>0.7</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-01-01 01:00:00</td>\n",
              "      <td>2</td>\n",
              "      <td>41.33</td>\n",
              "      <td>41.33</td>\n",
              "      <td>0.4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-01-01 02:00:00</td>\n",
              "      <td>3</td>\n",
              "      <td>42.18</td>\n",
              "      <td>42.18</td>\n",
              "      <td>0.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-01-01 03:00:00</td>\n",
              "      <td>4</td>\n",
              "      <td>44.37</td>\n",
              "      <td>44.37</td>\n",
              "      <td>0.7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-01-01 04:00:00</td>\n",
              "      <td>5</td>\n",
              "      <td>37.67</td>\n",
              "      <td>37.67</td>\n",
              "      <td>0.3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c40964e2-ba3f-42f3-a2b3-3787defe82bc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c40964e2-ba3f-42f3-a2b3-3787defe82bc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c40964e2-ba3f-42f3-a2b3-3787defe82bc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 335
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isna().any()"
      ],
      "metadata": {
        "id": "6D5CnwasP1C_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47a8f97a-5924-44c1-db45-ae67dedbb04f"
      },
      "execution_count": 336,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "datetime    False\n",
              "hour        False\n",
              "price       False\n",
              "regprice    False\n",
              "temp        False\n",
              "wind        False\n",
              "globrad     False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 336
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['datetime'] = pd.to_datetime(df['datetime'], infer_datetime_format=True)\n",
        "df.head()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gI-1BITZUWLB",
        "outputId": "61795579-ad98-4246-8e71-bd4e2e608d9a"
      },
      "execution_count": 337,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             datetime hour  price  regprice  temp  wind  globrad\n",
              "0 2022-01-01 00:00:00    1  46.60     46.60   0.7   2.0      0.0\n",
              "1 2022-01-01 01:00:00    2  41.33     41.33   0.4   2.0      0.0\n",
              "2 2022-01-01 02:00:00    3  42.18     42.18   0.7   3.0      0.0\n",
              "3 2022-01-01 03:00:00    4  44.37     44.37   0.7   5.0      0.0\n",
              "4 2022-01-01 04:00:00    5  37.67     37.67   0.3   5.0      0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69b65add-ecf2-45f6-86a0-2f4a7bc20d0e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>price</th>\n",
              "      <th>regprice</th>\n",
              "      <th>temp</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-01-01 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>46.60</td>\n",
              "      <td>46.60</td>\n",
              "      <td>0.7</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-01-01 01:00:00</td>\n",
              "      <td>2</td>\n",
              "      <td>41.33</td>\n",
              "      <td>41.33</td>\n",
              "      <td>0.4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-01-01 02:00:00</td>\n",
              "      <td>3</td>\n",
              "      <td>42.18</td>\n",
              "      <td>42.18</td>\n",
              "      <td>0.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-01-01 03:00:00</td>\n",
              "      <td>4</td>\n",
              "      <td>44.37</td>\n",
              "      <td>44.37</td>\n",
              "      <td>0.7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-01-01 04:00:00</td>\n",
              "      <td>5</td>\n",
              "      <td>37.67</td>\n",
              "      <td>37.67</td>\n",
              "      <td>0.3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69b65add-ecf2-45f6-86a0-2f4a7bc20d0e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-69b65add-ecf2-45f6-86a0-2f4a7bc20d0e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-69b65add-ecf2-45f6-86a0-2f4a7bc20d0e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 337
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dic8tvV6U4mp"
      },
      "execution_count": 337,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_december = df.tail(168)\n",
        "\n",
        "df_december.rename(columns = {'price':'Spot price', 'regprice':'Regulating price'}, inplace = True)\n",
        "\n",
        "#df_december.set_index('datetime')[['hour', 'price','regprice']].plot(subplots=True)\n",
        "\n",
        "df_december.set_index('datetime')[['hour', 'Spot price','Regulating price']].plot(linewidth=1)\n",
        "plt.plot(df_december['Spot price'], label='Spot price')\n",
        "plt.plot(df_december['Regulating price'], label='Regulating price')\n",
        "\n",
        "#sns.lineplot(data=df, x='x_var', y='y_var', linewidth=2)\n",
        "\n",
        "#x = list(range(1,25,1))\n",
        "# naming of x-axis and y-axis\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.title(\"Spot prices and regulating prices in SE3 25/12 to 31/12 2022\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 916
        },
        "id": "mOCW1pb2V7_S",
        "outputId": "5f8578d5-b005-44db-ebfd-b88a23ff2d7b"
      },
      "execution_count": 338,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-338-956e41acc41e>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_december.rename(columns = {'price':'Spot price', 'regprice':'Regulating price'}, inplace = True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Spot prices and regulating prices in SE3 25/12 to 31/12 2022')"
            ]
          },
          "metadata": {},
          "execution_count": 338
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_decembermonth = df.tail(744)\n",
        "\n",
        "df_decembermonth.rename(columns = {'price':'Spot price', 'regprice':'Regulating price'}, inplace = True)\n",
        "\n",
        "#df_december.set_index('datetime')[['hour', 'price','regprice']].plot(subplots=True)\n",
        "\n",
        "df_decembermonth.set_index('datetime')[['hour', 'Spot price','Regulating price']].plot(linewidth=1)\n",
        "plt.plot(df_december['Spot price'], label='Spot price', linewidth = 0.2)\n",
        "plt.plot(df_december['Regulating price'], label='Regulating price', linewidth = 0.2)\n",
        "\n",
        "\n",
        "\n",
        "x = list(range(1,25,1))\n",
        "# naming of x-axis and y-axis\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.title(\"Spot prices and regulating prices in SE3 for H1-H24 December 2022\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 937
        },
        "id": "YWojqBXbaQI5",
        "outputId": "7e2ca29e-d64e-48e1-f792-f93ae3500baa"
      },
      "execution_count": 339,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-339-29803f7ba7ab>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_decembermonth.rename(columns = {'price':'Spot price', 'regprice':'Regulating price'}, inplace = True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Spot prices and regulating prices in SE3 for H1-H24 December 2022')"
            ]
          },
          "metadata": {},
          "execution_count": 339
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#regprice\tregvol.up\tregvol.down\tregvol.dd\tspread\n",
        "\n",
        "df_input=df[['regprice','price', 'hour', \"wind\", \"globrad\", \"temp\"]] #I want to change this to hour"
      ],
      "metadata": {
        "id": "IVo4c2ooVm7b"
      },
      "execution_count": 340,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = MinMaxScaler()\n",
        "\n",
        "data_scaled=scaler.fit_transform(df_input)"
      ],
      "metadata": {
        "id": "EQLntwzdVvh7"
      },
      "execution_count": 341,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_scaled"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0PUMnUVFV-6q",
        "outputId": "2a3c209a-5607-4a95-fde2-a7b8ccea2ff2"
      },
      "execution_count": 342,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.08111801, 0.06069447, 0.        , 0.16666667, 0.        ,\n",
              "        0.26813187],\n",
              "       [0.07535744, 0.05412381, 0.04347826, 0.16666667, 0.        ,\n",
              "        0.26153846],\n",
              "       [0.07628656, 0.05518359, 0.08695652, 0.25      , 0.        ,\n",
              "        0.26813187],\n",
              "       ...,\n",
              "       [0.02252853, 0.02115828, 0.91304348, 0.08333333, 0.        ,\n",
              "        0.33846154],\n",
              "       [0.02252853, 0.0149866 , 0.95652174, 0.41666667, 0.        ,\n",
              "        0.35384615],\n",
              "       [0.02283459, 0.00862789, 1.        , 0.41666667, 0.        ,\n",
              "        0.36703297]])"
            ]
          },
          "metadata": {},
          "execution_count": 342
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = data_scaled\n",
        "target = data_scaled[:,0]"
      ],
      "metadata": {
        "id": "Ywpe1GVYWNKT"
      },
      "execution_count": 343,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TimeseriesGenerator(features,target,length=lookback,sampling_rate=1,batch_size=batch_size)[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g1RYGxRfWOVk",
        "outputId": "b9d39187-0258-428d-c070-f8c4fd2dc3e9"
      },
      "execution_count": 344,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[[8.11180097e-02, 6.06944704e-02, 0.00000000e+00, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.53574396e-02, 5.41238077e-02, 4.34782609e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.61538462e-01]],\n",
              " \n",
              "        [[7.53574396e-02, 5.41238077e-02, 4.34782609e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.61538462e-01],\n",
              "         [7.62865638e-02, 5.51835920e-02, 8.69565217e-02, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.68131868e-01]],\n",
              " \n",
              "        [[7.62865638e-02, 5.51835920e-02, 8.69565217e-02, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.86804250e-02, 5.79140951e-02, 1.30434783e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.68131868e-01]],\n",
              " \n",
              "        [[7.86804250e-02, 5.79140951e-02, 1.30434783e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.13567400e-02, 4.95605012e-02, 1.73913043e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.59340659e-01]],\n",
              " \n",
              "        [[7.13567400e-02, 4.95605012e-02, 1.73913043e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.59340659e-01],\n",
              "         [7.35757072e-02, 5.20915155e-02, 2.17391304e-01, 3.33333333e-01,\n",
              "          0.00000000e+00, 2.48351648e-01]],\n",
              " \n",
              "        [[7.35757072e-02, 5.20915155e-02, 2.17391304e-01, 3.33333333e-01,\n",
              "          0.00000000e+00, 2.48351648e-01],\n",
              "         [7.45485549e-02, 5.32011720e-02, 2.60869565e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.37362637e-01]],\n",
              " \n",
              "        [[7.45485549e-02, 5.32011720e-02, 2.60869565e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.37362637e-01],\n",
              "         [7.74670981e-02, 5.65301415e-02, 3.04347826e-01, 4.16666667e-01,\n",
              "          4.65473503e-05, 2.35164835e-01]],\n",
              " \n",
              "        [[7.74670981e-02, 5.65301415e-02, 3.04347826e-01, 4.16666667e-01,\n",
              "          4.65473503e-05, 2.35164835e-01],\n",
              "         [7.73359276e-02, 6.45096939e-02, 3.47826087e-01, 3.33333333e-01,\n",
              "          1.28005213e-03, 2.28571429e-01]],\n",
              " \n",
              "        [[7.73359276e-02, 6.45096939e-02, 3.47826087e-01, 3.33333333e-01,\n",
              "          1.28005213e-03, 2.28571429e-01],\n",
              "         [7.73249967e-02, 8.99320491e-02, 3.91304348e-01, 3.33333333e-01,\n",
              "          1.40805735e-02, 2.26373626e-01]],\n",
              " \n",
              "        [[7.73249967e-02, 8.99320491e-02, 3.91304348e-01, 3.33333333e-01,\n",
              "          1.40805735e-02, 2.26373626e-01],\n",
              "         [8.48345066e-02, 9.83355152e-02, 4.34782609e-01, 3.33333333e-01,\n",
              "          2.34133172e-02, 2.21978022e-01]],\n",
              " \n",
              "        [[8.48345066e-02, 9.83355152e-02, 4.34782609e-01, 3.33333333e-01,\n",
              "          2.34133172e-02, 2.21978022e-01],\n",
              "         [1.22108784e-01, 1.07449660e-01, 4.78260870e-01, 1.66666667e-01,\n",
              "          3.22456769e-02, 2.21978022e-01]],\n",
              " \n",
              "        [[1.22108784e-01, 1.07449660e-01, 4.78260870e-01, 1.66666667e-01,\n",
              "          3.22456769e-02, 2.21978022e-01],\n",
              "         [1.01230816e-01, 1.20715666e-01, 5.21739130e-01, 2.50000000e-01,\n",
              "          2.94062885e-02, 2.24175824e-01]],\n",
              " \n",
              "        [[1.01230816e-01, 1.20715666e-01, 5.21739130e-01, 2.50000000e-01,\n",
              "          2.94062885e-02, 2.24175824e-01],\n",
              "         [8.50640549e-02, 1.23284085e-01, 5.65217391e-01, 1.66666667e-01,\n",
              "          2.23776387e-02, 2.26373626e-01]],\n",
              " \n",
              "        [[8.50640549e-02, 1.23284085e-01, 5.65217391e-01, 1.66666667e-01,\n",
              "          2.23776387e-02, 2.26373626e-01],\n",
              "         [9.13930305e-02, 1.23745402e-01, 6.08695652e-01, 8.33333333e-02,\n",
              "          9.11164382e-03, 2.24175824e-01]],\n",
              " \n",
              "        [[9.13930305e-02, 1.23745402e-01, 6.08695652e-01, 8.33333333e-02,\n",
              "          9.11164382e-03, 2.24175824e-01],\n",
              "         [1.40877093e-01, 1.28857303e-01, 6.52173913e-01, 8.33333333e-02,\n",
              "          7.68031280e-04, 2.28571429e-01]],\n",
              " \n",
              "        [[1.40877093e-01, 1.28857303e-01, 6.52173913e-01, 8.33333333e-02,\n",
              "          7.68031280e-04, 2.28571429e-01],\n",
              "         [1.41675047e-01, 1.60438875e-01, 6.95652174e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 2.24175824e-01]],\n",
              " \n",
              "        [[1.41675047e-01, 1.60438875e-01, 6.95652174e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 2.24175824e-01],\n",
              "         [1.41675047e-01, 1.89576710e-01, 7.39130435e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 2.24175824e-01]],\n",
              " \n",
              "        [[1.41675047e-01, 1.89576710e-01, 7.39130435e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 2.24175824e-01],\n",
              "         [1.41675047e-01, 1.85038339e-01, 7.82608696e-01, 0.00000000e+00,\n",
              "          0.00000000e+00, 2.15384615e-01]],\n",
              " \n",
              "        [[1.41675047e-01, 1.85038339e-01, 7.82608696e-01, 0.00000000e+00,\n",
              "          0.00000000e+00, 2.15384615e-01],\n",
              "         [1.17627126e-01, 1.77495169e-01, 8.26086957e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 2.19780220e-01]],\n",
              " \n",
              "        [[1.17627126e-01, 1.77495169e-01, 8.26086957e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 2.19780220e-01],\n",
              "         [1.17627126e-01, 1.54553955e-01, 8.69565217e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.15384615e-01]],\n",
              " \n",
              "        [[1.17627126e-01, 1.54553955e-01, 8.69565217e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.15384615e-01],\n",
              "         [7.71282410e-02, 1.30528022e-01, 9.13043478e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.21978022e-01]],\n",
              " \n",
              "        [[7.71282410e-02, 1.30528022e-01, 9.13043478e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.21978022e-01],\n",
              "         [7.66144900e-02, 1.21189452e-01, 9.56521739e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.19780220e-01]],\n",
              " \n",
              "        [[7.66144900e-02, 1.21189452e-01, 9.56521739e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.19780220e-01],\n",
              "         [6.07865856e-02, 1.06215323e-01, 1.00000000e+00, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.41758242e-01]],\n",
              " \n",
              "        [[6.07865856e-02, 1.06215323e-01, 1.00000000e+00, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.41758242e-01],\n",
              "         [5.96934983e-02, 4.58948943e-02, 0.00000000e+00, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01]],\n",
              " \n",
              "        [[5.96934983e-02, 4.58948943e-02, 0.00000000e+00, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01],\n",
              "         [7.93690700e-02, 4.54709806e-02, 4.34782609e-02, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01]],\n",
              " \n",
              "        [[7.93690700e-02, 4.54709806e-02, 4.34782609e-02, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01],\n",
              "         [7.93690700e-02, 4.54335765e-02, 8.69565217e-02, 3.33333333e-01,\n",
              "          0.00000000e+00, 2.52747253e-01]],\n",
              " \n",
              "        [[7.93690700e-02, 4.54335765e-02, 8.69565217e-02, 3.33333333e-01,\n",
              "          0.00000000e+00, 2.52747253e-01],\n",
              "         [6.74544183e-02, 4.51094071e-02, 1.30434783e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.54945055e-01]],\n",
              " \n",
              "        [[6.74544183e-02, 4.51094071e-02, 1.30434783e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.54945055e-01],\n",
              "         [6.24918018e-02, 3.94489122e-02, 1.73913043e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.59340659e-01]],\n",
              " \n",
              "        [[6.24918018e-02, 3.94489122e-02, 1.73913043e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.59340659e-01],\n",
              "         [5.96934983e-02, 4.49473225e-02, 2.17391304e-01, 3.33333333e-01,\n",
              "          0.00000000e+00, 2.65934066e-01]],\n",
              " \n",
              "        [[5.96934983e-02, 4.49473225e-02, 2.17391304e-01, 3.33333333e-01,\n",
              "          0.00000000e+00, 2.65934066e-01],\n",
              "         [5.96934983e-02, 4.56330653e-02, 2.60869565e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.83516484e-01]],\n",
              " \n",
              "        [[5.96934983e-02, 4.56330653e-02, 2.60869565e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.83516484e-01],\n",
              "         [5.96934983e-02, 5.47098061e-02, 3.04347826e-01, 2.50000000e-01,\n",
              "          6.98210254e-05, 2.90109890e-01]],\n",
              " \n",
              "        [[5.96934983e-02, 5.47098061e-02, 3.04347826e-01, 2.50000000e-01,\n",
              "          6.98210254e-05, 2.90109890e-01],\n",
              "         [6.52791745e-02, 6.36244623e-02, 3.47826087e-01, 1.66666667e-01,\n",
              "          1.80370982e-03, 2.94505495e-01]],\n",
              " \n",
              "        [[6.52791745e-02, 6.36244623e-02, 3.47826087e-01, 1.66666667e-01,\n",
              "          1.80370982e-03, 2.94505495e-01],\n",
              "         [6.62520222e-02, 7.74141263e-02, 3.91304348e-01, 8.33333333e-02,\n",
              "          1.12760956e-02, 2.94505495e-01]],\n",
              " \n",
              "        [[6.62520222e-02, 7.74141263e-02, 3.91304348e-01, 8.33333333e-02,\n",
              "          1.12760956e-02, 2.94505495e-01],\n",
              "         [6.62520222e-02, 8.99819213e-02, 4.34782609e-01, 1.66666667e-01,\n",
              "          3.12332720e-02, 3.01098901e-01]],\n",
              " \n",
              "        [[6.62520222e-02, 8.99819213e-02, 4.34782609e-01, 1.66666667e-01,\n",
              "          3.12332720e-02, 3.01098901e-01],\n",
              "         [1.02608106e-01, 8.52066579e-02, 4.78260870e-01, 1.66666667e-01,\n",
              "          4.07638420e-02, 3.14285714e-01]],\n",
              " \n",
              "        [[1.02608106e-01, 8.52066579e-02, 4.78260870e-01, 1.66666667e-01,\n",
              "          4.07638420e-02, 3.14285714e-01],\n",
              "         [1.00727996e-01, 8.30621532e-02, 5.21739130e-01, 8.33333333e-02,\n",
              "          4.08569367e-02, 3.23076923e-01]],\n",
              " \n",
              "        [[1.00727996e-01, 8.30621532e-02, 5.21739130e-01, 8.33333333e-02,\n",
              "          4.08569367e-02, 3.23076923e-01],\n",
              "         [1.17627126e-01, 6.11433202e-02, 5.65217391e-01, 8.33333333e-02,\n",
              "          2.92200991e-02, 3.25274725e-01]],\n",
              " \n",
              "        [[1.17627126e-01, 6.11433202e-02, 5.65217391e-01, 8.33333333e-02,\n",
              "          2.92200991e-02, 3.25274725e-01],\n",
              "         [1.28557999e-01, 6.37616109e-02, 6.08695652e-01, 8.33333333e-02,\n",
              "          8.59962297e-03, 3.34065934e-01]],\n",
              " \n",
              "        [[1.28557999e-01, 6.37616109e-02, 6.08695652e-01, 8.33333333e-02,\n",
              "          8.59962297e-03, 3.34065934e-01],\n",
              "         [1.50419746e-01, 9.60912661e-02, 6.52173913e-01, 1.66666667e-01,\n",
              "          7.79668117e-04, 3.34065934e-01]],\n",
              " \n",
              "        [[1.50419746e-01, 9.60912661e-02, 6.52173913e-01, 1.66666667e-01,\n",
              "          7.79668117e-04, 3.34065934e-01],\n",
              "         [1.26535788e-01, 1.12499221e-01, 6.95652174e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.38461538e-01]],\n",
              " \n",
              "        [[1.26535788e-01, 1.12499221e-01, 6.95652174e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.38461538e-01],\n",
              "         [1.34460671e-01, 1.21538557e-01, 7.39130435e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.42857143e-01]],\n",
              " \n",
              "        [[1.34460671e-01, 1.21538557e-01, 7.39130435e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.42857143e-01],\n",
              "         [1.24961742e-01, 1.10703821e-01, 7.82608696e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.47252747e-01]],\n",
              " \n",
              "        [[1.24961742e-01, 1.10703821e-01, 7.82608696e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.47252747e-01],\n",
              "         [1.08084474e-01, 9.14531513e-02, 8.26086957e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.53846154e-01]],\n",
              " \n",
              "        [[1.08084474e-01, 9.14531513e-02, 8.26086957e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.53846154e-01],\n",
              "         [6.29727603e-02, 7.00704445e-02, 8.69565217e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.58241758e-01]],\n",
              " \n",
              "        [[6.29727603e-02, 7.00704445e-02, 8.69565217e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.58241758e-01],\n",
              "         [5.96934983e-02, 6.01458762e-02, 9.13043478e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.56043956e-01]],\n",
              " \n",
              "        [[5.96934983e-02, 6.01458762e-02, 9.13043478e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.56043956e-01],\n",
              "         [5.96934983e-02, 6.03079609e-02, 9.56521739e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 3.56043956e-01]],\n",
              " \n",
              "        [[5.96934983e-02, 6.03079609e-02, 9.56521739e-01, 8.33333333e-02,\n",
              "          0.00000000e+00, 3.56043956e-01],\n",
              "         [5.69607800e-02, 4.36506452e-02, 1.00000000e+00, 0.00000000e+00,\n",
              "          0.00000000e+00, 3.58241758e-01]],\n",
              " \n",
              "        [[5.69607800e-02, 4.36506452e-02, 1.00000000e+00, 0.00000000e+00,\n",
              "          0.00000000e+00, 3.58241758e-01],\n",
              "         [4.65764505e-02, 2.86391123e-02, 0.00000000e+00, 8.33333333e-02,\n",
              "          0.00000000e+00, 3.56043956e-01]],\n",
              " \n",
              "        [[4.65764505e-02, 2.86391123e-02, 0.00000000e+00, 8.33333333e-02,\n",
              "          0.00000000e+00, 3.56043956e-01],\n",
              "         [4.65764505e-02, 2.74297114e-02, 4.34782609e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.56043956e-01]],\n",
              " \n",
              "        [[4.65764505e-02, 2.74297114e-02, 4.34782609e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.56043956e-01],\n",
              "         [4.32971886e-02, 2.73673711e-02, 8.69565217e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.56043956e-01]],\n",
              " \n",
              "        [[4.32971886e-02, 2.73673711e-02, 8.69565217e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.56043956e-01],\n",
              "         [4.32971886e-02, 2.73050309e-02, 1.30434783e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.53846154e-01]],\n",
              " \n",
              "        [[4.32971886e-02, 2.73050309e-02, 1.30434783e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.53846154e-01],\n",
              "         [4.71229942e-02, 2.78536251e-02, 1.73913043e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.51648352e-01]],\n",
              " \n",
              "        [[4.71229942e-02, 2.78536251e-02, 1.73913043e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.51648352e-01],\n",
              "         [4.71229942e-02, 3.91870831e-02, 2.17391304e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.47252747e-01]],\n",
              " \n",
              "        [[4.71229942e-02, 3.91870831e-02, 2.17391304e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.47252747e-01],\n",
              "         [5.62174807e-02, 4.94108846e-02, 2.60869565e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 3.45054945e-01]],\n",
              " \n",
              "        [[5.62174807e-02, 4.94108846e-02, 2.60869565e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 3.45054945e-01],\n",
              "         [5.86004110e-02, 1.13259772e-01, 3.04347826e-01, 2.50000000e-01,\n",
              "          1.16368376e-05, 3.34065934e-01]],\n",
              " \n",
              "        [[5.86004110e-02, 1.13259772e-01, 3.04347826e-01, 2.50000000e-01,\n",
              "          1.16368376e-05, 3.34065934e-01],\n",
              "         [1.39488872e-01, 1.55863101e-01, 3.47826087e-01, 2.50000000e-01,\n",
              "          9.77494356e-04, 3.34065934e-01]],\n",
              " \n",
              "        [[1.39488872e-01, 1.55863101e-01, 3.47826087e-01, 2.50000000e-01,\n",
              "          9.77494356e-04, 3.34065934e-01],\n",
              "         [1.50605570e-01, 1.39953868e-01, 3.91304348e-01, 1.66666667e-01,\n",
              "          1.19743059e-02, 3.36263736e-01]],\n",
              " \n",
              "        [[1.50605570e-01, 1.39953868e-01, 3.91304348e-01, 1.66666667e-01,\n",
              "          1.19743059e-02, 3.36263736e-01],\n",
              "         [1.32252634e-01, 1.19020011e-01, 4.34782609e-01, 8.33333333e-02,\n",
              "          2.16677916e-02, 3.36263736e-01]],\n",
              " \n",
              "        [[1.32252634e-01, 1.19020011e-01, 4.34782609e-01, 8.33333333e-02,\n",
              "          2.16677916e-02, 3.36263736e-01],\n",
              "         [1.29355953e-01, 1.15715978e-01, 4.78260870e-01, 8.33333333e-02,\n",
              "          3.31766239e-02, 3.45054945e-01]],\n",
              " \n",
              "        [[1.29355953e-01, 1.15715978e-01, 4.78260870e-01, 8.33333333e-02,\n",
              "          3.31766239e-02, 3.45054945e-01],\n",
              "         [1.20217743e-01, 1.05292687e-01, 5.21739130e-01, 8.33333333e-02,\n",
              "          3.44566761e-02, 3.47252747e-01]],\n",
              " \n",
              "        [[1.20217743e-01, 1.05292687e-01, 5.21739130e-01, 8.33333333e-02,\n",
              "          3.44566761e-02, 3.47252747e-01],\n",
              "         [1.18610905e-01, 1.03459884e-01, 5.65217391e-01, 1.66666667e-01,\n",
              "          1.92240557e-02, 3.53846154e-01]],\n",
              " \n",
              "        [[1.18610905e-01, 1.03459884e-01, 5.65217391e-01, 1.66666667e-01,\n",
              "          1.92240557e-02, 3.53846154e-01],\n",
              "         [1.18709282e-01, 1.03572097e-01, 6.08695652e-01, 1.66666667e-01,\n",
              "          8.72762818e-03, 3.60439560e-01]],\n",
              " \n",
              "        [[1.18709282e-01, 1.03572097e-01, 6.08695652e-01, 1.66666667e-01,\n",
              "          8.72762818e-03, 3.60439560e-01],\n",
              "         [1.37357352e-01, 1.24842591e-01, 6.52173913e-01, 1.66666667e-01,\n",
              "          5.00384016e-04, 3.67032967e-01]],\n",
              " \n",
              "        [[1.37357352e-01, 1.24842591e-01, 6.52173913e-01, 1.66666667e-01,\n",
              "          5.00384016e-04, 3.67032967e-01],\n",
              "         [1.61951817e-01, 1.52895705e-01, 6.95652174e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.60439560e-01]]]),\n",
              " array([0.07628656, 0.07868042, 0.07135674, 0.07357571, 0.07454855,\n",
              "        0.0774671 , 0.07733593, 0.077325  , 0.08483451, 0.12210878,\n",
              "        0.10123082, 0.08506405, 0.09139303, 0.14087709, 0.14167505,\n",
              "        0.14167505, 0.14167505, 0.11762713, 0.11762713, 0.07712824,\n",
              "        0.07661449, 0.06078659, 0.0596935 , 0.07936907, 0.07936907,\n",
              "        0.06745442, 0.0624918 , 0.0596935 , 0.0596935 , 0.0596935 ,\n",
              "        0.06527917, 0.06625202, 0.06625202, 0.10260811, 0.100728  ,\n",
              "        0.11762713, 0.128558  , 0.15041975, 0.12653579, 0.13446067,\n",
              "        0.12496174, 0.10808447, 0.06297276, 0.0596935 , 0.0596935 ,\n",
              "        0.05696078, 0.04657645, 0.04657645, 0.04329719, 0.04329719,\n",
              "        0.04712299, 0.04712299, 0.05621748, 0.05860041, 0.13948887,\n",
              "        0.15060557, 0.13225263, 0.12935595, 0.12021774, 0.1186109 ,\n",
              "        0.11870928, 0.13735735, 0.16195182, 0.18274234]))"
            ]
          },
          "metadata": {},
          "execution_count": 344
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain,xtest,ytrain,ytest=train_test_split(features,target,test_size=2196,random_state=123,shuffle=False) #2196 = 25% of the dataset\n",
        "#shuffle=False is set so the values don't shuffle during the training process for sequence modelling (timeseries)"
      ],
      "metadata": {
        "id": "jZ1ChRIqWU7a"
      },
      "execution_count": 345,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QTULiKkJWdwE",
        "outputId": "7706e308-24cf-4607-8f26-3629736fa994"
      },
      "execution_count": 346,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6564, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 346
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQWfEP07Wtof",
        "outputId": "59848dec-1767-4692-a766-70d4e3a4b0d2"
      },
      "execution_count": 347,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2196, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 347
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytrain.shape\n",
        "#ytest.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zdtocn3KWtwl",
        "outputId": "3672fb7c-a03b-480e-b1c1-18e5dbdd9ff4"
      },
      "execution_count": 348,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6564,)"
            ]
          },
          "metadata": {},
          "execution_count": 348
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train_generator = TimeseriesGenerator(xtrain, ytrain, length=win_length, sampling_rate=1, batch_size=batch_size)\n",
        "test_generator = TimeseriesGenerator(xtest, ytest, length=win_length, sampling_rate=1, batch_size=batch_size)"
      ],
      "metadata": {
        "id": "ALDYxIXKWzuw"
      },
      "execution_count": 349,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_generator[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uySlzX-9W3l1",
        "outputId": "bd1a03a0-4f45-4168-fcf4-df47ef1842be"
      },
      "execution_count": 350,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[[8.11180097e-02, 6.06944704e-02, 0.00000000e+00, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.53574396e-02, 5.41238077e-02, 4.34782609e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.61538462e-01],\n",
              "         [7.62865638e-02, 5.51835920e-02, 8.69565217e-02, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         ...,\n",
              "         [7.71282410e-02, 1.30528022e-01, 9.13043478e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.21978022e-01],\n",
              "         [7.66144900e-02, 1.21189452e-01, 9.56521739e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.19780220e-01],\n",
              "         [6.07865856e-02, 1.06215323e-01, 1.00000000e+00, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.41758242e-01]],\n",
              " \n",
              "        [[7.53574396e-02, 5.41238077e-02, 4.34782609e-02, 1.66666667e-01,\n",
              "          0.00000000e+00, 2.61538462e-01],\n",
              "         [7.62865638e-02, 5.51835920e-02, 8.69565217e-02, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.86804250e-02, 5.79140951e-02, 1.30434783e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         ...,\n",
              "         [7.66144900e-02, 1.21189452e-01, 9.56521739e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.19780220e-01],\n",
              "         [6.07865856e-02, 1.06215323e-01, 1.00000000e+00, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.41758242e-01],\n",
              "         [5.96934983e-02, 4.58948943e-02, 0.00000000e+00, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01]],\n",
              " \n",
              "        [[7.62865638e-02, 5.51835920e-02, 8.69565217e-02, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.86804250e-02, 5.79140951e-02, 1.30434783e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.68131868e-01],\n",
              "         [7.13567400e-02, 4.95605012e-02, 1.73913043e-01, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.59340659e-01],\n",
              "         ...,\n",
              "         [6.07865856e-02, 1.06215323e-01, 1.00000000e+00, 2.50000000e-01,\n",
              "          0.00000000e+00, 2.41758242e-01],\n",
              "         [5.96934983e-02, 4.58948943e-02, 0.00000000e+00, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01],\n",
              "         [7.93690700e-02, 4.54709806e-02, 4.34782609e-02, 4.16666667e-01,\n",
              "          0.00000000e+00, 2.43956044e-01]],\n",
              " \n",
              "        ...,\n",
              " \n",
              "        [[1.18610905e-01, 1.03459884e-01, 5.65217391e-01, 1.66666667e-01,\n",
              "          1.92240557e-02, 3.53846154e-01],\n",
              "         [1.18709282e-01, 1.03572097e-01, 6.08695652e-01, 1.66666667e-01,\n",
              "          8.72762818e-03, 3.60439560e-01],\n",
              "         [1.37357352e-01, 1.24842591e-01, 6.52173913e-01, 1.66666667e-01,\n",
              "          5.00384016e-04, 3.67032967e-01],\n",
              "         ...,\n",
              "         [2.14911897e-01, 2.33651269e-01, 4.34782609e-01, 3.33333333e-01,\n",
              "          9.34554425e-02, 2.74725275e-01],\n",
              "         [2.10124175e-01, 2.24574528e-01, 4.78260870e-01, 2.50000000e-01,\n",
              "          1.21383853e-01, 2.87912088e-01],\n",
              "         [2.13818810e-01, 2.24624400e-01, 5.21739130e-01, 3.33333333e-01,\n",
              "          1.15809808e-01, 2.92307692e-01]],\n",
              " \n",
              "        [[1.18709282e-01, 1.03572097e-01, 6.08695652e-01, 1.66666667e-01,\n",
              "          8.72762818e-03, 3.60439560e-01],\n",
              "         [1.37357352e-01, 1.24842591e-01, 6.52173913e-01, 1.66666667e-01,\n",
              "          5.00384016e-04, 3.67032967e-01],\n",
              "         [1.61951817e-01, 1.52895705e-01, 6.95652174e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.60439560e-01],\n",
              "         ...,\n",
              "         [2.10124175e-01, 2.24574528e-01, 4.78260870e-01, 2.50000000e-01,\n",
              "          1.21383853e-01, 2.87912088e-01],\n",
              "         [2.13818810e-01, 2.24624400e-01, 5.21739130e-01, 3.33333333e-01,\n",
              "          1.15809808e-01, 2.92307692e-01],\n",
              "         [2.08353373e-01, 2.21133346e-01, 5.65217391e-01, 2.50000000e-01,\n",
              "          7.76409803e-02, 2.96703297e-01]],\n",
              " \n",
              "        [[1.37357352e-01, 1.24842591e-01, 6.52173913e-01, 1.66666667e-01,\n",
              "          5.00384016e-04, 3.67032967e-01],\n",
              "         [1.61951817e-01, 1.52895705e-01, 6.95652174e-01, 1.66666667e-01,\n",
              "          0.00000000e+00, 3.60439560e-01],\n",
              "         [1.82742337e-01, 1.76609937e-01, 7.39130435e-01, 2.50000000e-01,\n",
              "          0.00000000e+00, 3.60439560e-01],\n",
              "         ...,\n",
              "         [2.13818810e-01, 2.24624400e-01, 5.21739130e-01, 3.33333333e-01,\n",
              "          1.15809808e-01, 2.92307692e-01],\n",
              "         [2.08353373e-01, 2.21133346e-01, 5.65217391e-01, 2.50000000e-01,\n",
              "          7.76409803e-02, 2.96703297e-01],\n",
              "         [2.09807179e-01, 2.20410199e-01, 6.08695652e-01, 2.50000000e-01,\n",
              "          2.15165127e-02, 2.81318681e-01]]]),\n",
              " array([0.0596935 , 0.07936907, 0.07936907, 0.06745442, 0.0624918 ,\n",
              "        0.0596935 , 0.0596935 , 0.0596935 , 0.06527917, 0.06625202,\n",
              "        0.06625202, 0.10260811, 0.100728  , 0.11762713, 0.128558  ,\n",
              "        0.15041975, 0.12653579, 0.13446067, 0.12496174, 0.10808447,\n",
              "        0.06297276, 0.0596935 , 0.0596935 , 0.05696078, 0.04657645,\n",
              "        0.04657645, 0.04329719, 0.04329719, 0.04712299, 0.04712299,\n",
              "        0.05621748, 0.05860041, 0.13948887, 0.15060557, 0.13225263,\n",
              "        0.12935595, 0.12021774, 0.1186109 , 0.11870928, 0.13735735,\n",
              "        0.16195182, 0.18274234, 0.17740807, 0.15568843, 0.13173888,\n",
              "        0.10930873, 0.1198133 , 0.10240042, 0.09521884, 0.10778934,\n",
              "        0.12092825, 0.12872196, 0.12921385, 0.13289756, 0.20070176,\n",
              "        0.21600498, 0.23240129, 0.21621267, 0.2149119 , 0.21012417,\n",
              "        0.21381881, 0.20835337, 0.20980718, 0.21709807]))"
            ]
          },
          "metadata": {},
          "execution_count": 350
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.Sequential()\n",
        "\n",
        "model.add(tf.keras.layers.LSTM(128,input_shape=(win_length,num_features),return_sequences=True, recurrent_regularizer='l2'))\n",
        "model.add(tf.keras.layers.LeakyReLU(alpha=0.5))\n",
        "\n",
        "model.add(tf.keras.layers.LSTM(128,return_sequences=True))\n",
        "model.add(tf.keras.layers.LeakyReLU(alpha = 0.9))\n",
        "model.add(tf.keras.layers.Dropout(0.3)) #was 0.3\n",
        "model.add(tf.keras.layers.LSTM(64,return_sequences=False))\n",
        "model.add(tf.keras.layers.Dropout(0.3)) #was 0.3\n",
        "\n",
        "model.add(tf.keras.layers.Dense(1))"
      ],
      "metadata": {
        "id": "q9A3OjHhW9Pb"
      },
      "execution_count": 433,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t2fmtQTBXBZw",
        "outputId": "63e19253-070c-462c-f5de-48a3b4d2638d"
      },
      "execution_count": 434,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_8\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm_24 (LSTM)              (None, 24, 128)           69120     \n",
            "                                                                 \n",
            " leaky_re_lu_16 (LeakyReLU)  (None, 24, 128)           0         \n",
            "                                                                 \n",
            " lstm_25 (LSTM)              (None, 24, 128)           131584    \n",
            "                                                                 \n",
            " leaky_re_lu_17 (LeakyReLU)  (None, 24, 128)           0         \n",
            "                                                                 \n",
            " dropout_16 (Dropout)        (None, 24, 128)           0         \n",
            "                                                                 \n",
            " lstm_26 (LSTM)              (None, 64)                49408     \n",
            "                                                                 \n",
            " dropout_17 (Dropout)        (None, 64)                0         \n",
            "                                                                 \n",
            " dense_8 (Dense)             (None, 1)                 65        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 250,177\n",
            "Trainable params: 250,177\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=2,mode='min')"
      ],
      "metadata": {
        "id": "RKNwt0XqXGKA"
      },
      "execution_count": 435,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(\n",
        "    loss=tf.losses.MeanSquaredError(),\n",
        "    optimizer=tf.optimizers.Adam(clipnorm=1), #This is changed what does it mean? \n",
        "    metrics=['accuracy']\n",
        ")"
      ],
      "metadata": {
        "id": "oHlBCHzGXd2V"
      },
      "execution_count": 436,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "jhMXuww7Ytg5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit_generator(\n",
        "    train_generator,\n",
        "    epochs=epochs,\n",
        "    validation_data=test_generator,\n",
        "    shuffle=False,\n",
        "    callbacks = [early_stopping]\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1IxyOPpXgsw",
        "outputId": "5fad0994-5180-4a9b-e416-bd716deb7e10"
      },
      "execution_count": 437,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-437-27c8f5dc54b8>:1: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  history = model.fit_generator(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "103/103 [==============================] - 8s 22ms/step - loss: 0.3471 - accuracy: 0.0000e+00 - val_loss: 0.0363 - val_accuracy: 4.6041e-04\n",
            "Epoch 2/20\n",
            "103/103 [==============================] - 2s 16ms/step - loss: 0.0200 - accuracy: 0.0000e+00 - val_loss: 0.0102 - val_accuracy: 4.6041e-04\n",
            "Epoch 3/20\n",
            "103/103 [==============================] - 1s 11ms/step - loss: 0.0120 - accuracy: 0.0000e+00 - val_loss: 0.0089 - val_accuracy: 4.6041e-04\n",
            "Epoch 4/20\n",
            "103/103 [==============================] - 1s 12ms/step - loss: 0.0108 - accuracy: 1.5291e-04 - val_loss: 0.0076 - val_accuracy: 4.6041e-04\n",
            "Epoch 5/20\n",
            "103/103 [==============================] - 1s 12ms/step - loss: 0.0093 - accuracy: 1.5291e-04 - val_loss: 0.0073 - val_accuracy: 4.6041e-04\n",
            "Epoch 6/20\n",
            "103/103 [==============================] - 1s 11ms/step - loss: 0.0078 - accuracy: 3.0581e-04 - val_loss: 0.0053 - val_accuracy: 4.6041e-04\n",
            "Epoch 7/20\n",
            "103/103 [==============================] - 1s 12ms/step - loss: 0.0069 - accuracy: 3.0581e-04 - val_loss: 0.0044 - val_accuracy: 4.6041e-04\n",
            "Epoch 8/20\n",
            "103/103 [==============================] - 1s 13ms/step - loss: 0.0066 - accuracy: 3.0581e-04 - val_loss: 0.0045 - val_accuracy: 4.6041e-04\n",
            "Epoch 9/20\n",
            "103/103 [==============================] - 1s 11ms/step - loss: 0.0060 - accuracy: 3.0581e-04 - val_loss: 0.0041 - val_accuracy: 4.6041e-04\n",
            "Epoch 10/20\n",
            "103/103 [==============================] - 1s 13ms/step - loss: 0.0054 - accuracy: 3.0581e-04 - val_loss: 0.0035 - val_accuracy: 4.6041e-04\n",
            "Epoch 11/20\n",
            "103/103 [==============================] - 2s 17ms/step - loss: 0.0051 - accuracy: 3.0581e-04 - val_loss: 0.0033 - val_accuracy: 4.6041e-04\n",
            "Epoch 12/20\n",
            "103/103 [==============================] - 1s 11ms/step - loss: 0.0049 - accuracy: 3.0581e-04 - val_loss: 0.0031 - val_accuracy: 4.6041e-04\n",
            "Epoch 13/20\n",
            "103/103 [==============================] - 1s 12ms/step - loss: 0.0046 - accuracy: 3.0581e-04 - val_loss: 0.0028 - val_accuracy: 4.6041e-04\n",
            "Epoch 14/20\n",
            "103/103 [==============================] - 1s 11ms/step - loss: 0.0045 - accuracy: 3.0581e-04 - val_loss: 0.0033 - val_accuracy: 4.6041e-04\n",
            "Epoch 15/20\n",
            "103/103 [==============================] - 1s 11ms/step - loss: 0.0045 - accuracy: 1.5291e-04 - val_loss: 0.0028 - val_accuracy: 4.6041e-04\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate_generator(test_generator,verbose=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unTgTRp6Xr-e",
        "outputId": "253a3044-a4a1-40eb-ad01-14f3501c37b7"
      },
      "execution_count": 438,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-438-b08afc977308>:1: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
            "  model.evaluate_generator(test_generator,verbose=0)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.002828247146680951, 0.0004604051646310836]"
            ]
          },
          "metadata": {},
          "execution_count": 438
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plot learning curves\n",
        "\n",
        "print(\"\\n\")\n",
        "print(history.history.keys())\n",
        "\n",
        "# summarize history for accuracy\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "# summarize history for loss\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "#dict_keys(['val_loss', 'val_acc', 'loss', 'acc'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qyyfUh_ZXKQZ",
        "outputId": "0849c185-4f4c-48a3-f862-b3a70a65a544"
      },
      "execution_count": 439,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DEpOSimQXyEl"
      },
      "execution_count": 439,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = model.predict_generator(test_generator)"
      ],
      "metadata": {
        "id": "63fKAesnXurd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7fb6632c-2c6b-442e-afc0-a5c639227d51"
      },
      "execution_count": 440,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-440-9068eb02ed61>:1: UserWarning: `Model.predict_generator` is deprecated and will be removed in a future version. Please use `Model.predict`, which supports generators.\n",
            "  predictions = model.predict_generator(test_generator)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions.shape"
      ],
      "metadata": {
        "id": "PfUFmNB-XwsM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44dcd316-729a-42b6-c780-eef8130ec8b2"
      },
      "execution_count": 441,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2172, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 441
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y9pfCaFSXyNr",
        "outputId": "9f334e96-e138-4e40-8762-2a99ed95c9b1"
      },
      "execution_count": 442,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.1294633 ],\n",
              "       [0.11668559],\n",
              "       [0.11140575],\n",
              "       ...,\n",
              "       [0.06036339],\n",
              "       [0.05214194],\n",
              "       [0.05118124]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 442
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ElVXCldmX0QV",
        "outputId": "e73a446e-b592-4b71-92b4-002e38910e22"
      },
      "execution_count": 443,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.14892222, 0.14963272, 0.0684382 , ..., 0.02252853, 0.02252853,\n",
              "       0.02283459])"
            ]
          },
          "metadata": {},
          "execution_count": 443
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V9VgZb_ZX1Vn",
        "outputId": "bd7f699c-d5e2-495a-8bb6-6902d678d9f1"
      },
      "execution_count": 444,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.14892222, 0.07108036, 0.52173913, 0.08333333, 0.44615635,\n",
              "        0.56263736],\n",
              "       [0.14963272, 0.07554392, 0.56521739, 0.        , 0.29785649,\n",
              "        0.54725275],\n",
              "       [0.0684382 , 0.07828689, 0.60869565, 0.        , 0.28385738,\n",
              "        0.53406593],\n",
              "       ...,\n",
              "       [0.02252853, 0.02115828, 0.91304348, 0.08333333, 0.        ,\n",
              "        0.33846154],\n",
              "       [0.02252853, 0.0149866 , 0.95652174, 0.41666667, 0.        ,\n",
              "        0.35384615],\n",
              "       [0.02283459, 0.00862789, 1.        , 0.41666667, 0.        ,\n",
              "        0.36703297]])"
            ]
          },
          "metadata": {},
          "execution_count": 444
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q4XukoHkX2Mz",
        "outputId": "d9d44627-f0b2-4a96-c2e5-ad696e3afcf1"
      },
      "execution_count": 445,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2196, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 445
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest[:,1:][win_length:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3cdUvnHAX3w3",
        "outputId": "ab171ca8-e4c3-42ad-a8d6-fe1c962ede94"
      },
      "execution_count": 446,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.0760177 , 0.52173913, 0.16666667, 0.12257081, 0.52307692],\n",
              "       [0.07460881, 0.56521739, 0.16666667, 0.14348221, 0.53406593],\n",
              "       [0.08307462, 0.60869565, 0.16666667, 0.17615845, 0.52747253],\n",
              "       ...,\n",
              "       [0.02115828, 0.91304348, 0.08333333, 0.        , 0.33846154],\n",
              "       [0.0149866 , 0.95652174, 0.41666667, 0.        , 0.35384615],\n",
              "       [0.00862789, 1.        , 0.41666667, 0.        , 0.36703297]])"
            ]
          },
          "metadata": {},
          "execution_count": 446
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred=pd.concat([pd.DataFrame(predictions), pd.DataFrame(xtest[:,1:][win_length:])],axis=1)"
      ],
      "metadata": {
        "id": "r6Euh6IfX5kc"
      },
      "execution_count": 447,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "fgKi6vymX8he",
        "outputId": "38c18631-60d5-4dab-e0a7-1bf7bd182a3b"
      },
      "execution_count": 448,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             0         0         1         2         3         4\n",
              "0     0.129463  0.076018  0.521739  0.166667  0.122571  0.523077\n",
              "1     0.116686  0.074609  0.565217  0.166667  0.143482  0.534066\n",
              "2     0.111406  0.083075  0.608696  0.166667  0.176158  0.527473\n",
              "3     0.116744  0.086142  0.652174  0.166667  0.144530  0.516484\n",
              "4     0.112176  0.116501  0.695652  0.166667  0.047443  0.503297\n",
              "...        ...       ...       ...       ...       ...       ...\n",
              "2167  0.098122  0.021395  0.826087  0.083333  0.000000  0.358242\n",
              "2168  0.075712  0.017019  0.869565  0.083333  0.000000  0.349451\n",
              "2169  0.060363  0.021158  0.913043  0.083333  0.000000  0.338462\n",
              "2170  0.052142  0.014987  0.956522  0.416667  0.000000  0.353846\n",
              "2171  0.051181  0.008628  1.000000  0.416667  0.000000  0.367033\n",
              "\n",
              "[2172 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d9545f3b-38af-4a86-a979-018f53541a4f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.129463</td>\n",
              "      <td>0.076018</td>\n",
              "      <td>0.521739</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.122571</td>\n",
              "      <td>0.523077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.116686</td>\n",
              "      <td>0.074609</td>\n",
              "      <td>0.565217</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.143482</td>\n",
              "      <td>0.534066</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.111406</td>\n",
              "      <td>0.083075</td>\n",
              "      <td>0.608696</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.176158</td>\n",
              "      <td>0.527473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.116744</td>\n",
              "      <td>0.086142</td>\n",
              "      <td>0.652174</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.144530</td>\n",
              "      <td>0.516484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.112176</td>\n",
              "      <td>0.116501</td>\n",
              "      <td>0.695652</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.047443</td>\n",
              "      <td>0.503297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2167</th>\n",
              "      <td>0.098122</td>\n",
              "      <td>0.021395</td>\n",
              "      <td>0.826087</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.358242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2168</th>\n",
              "      <td>0.075712</td>\n",
              "      <td>0.017019</td>\n",
              "      <td>0.869565</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.349451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2169</th>\n",
              "      <td>0.060363</td>\n",
              "      <td>0.021158</td>\n",
              "      <td>0.913043</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.338462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2170</th>\n",
              "      <td>0.052142</td>\n",
              "      <td>0.014987</td>\n",
              "      <td>0.956522</td>\n",
              "      <td>0.416667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.353846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2171</th>\n",
              "      <td>0.051181</td>\n",
              "      <td>0.008628</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.416667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.367033</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2172 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9545f3b-38af-4a86-a979-018f53541a4f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d9545f3b-38af-4a86-a979-018f53541a4f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d9545f3b-38af-4a86-a979-018f53541a4f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 448
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rev_trans=scaler.inverse_transform(df_pred)"
      ],
      "metadata": {
        "id": "lWIh1WfbX_B5"
      },
      "execution_count": 449,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4Isa84DDkoGm"
      },
      "execution_count": 449,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rev_trans"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YcLlgJcZYBrY",
        "outputId": "41fb8e70-c53e-4bb3-e9a8-025567a506e9"
      },
      "execution_count": 450,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[126.18291251, 124.43305542,  13.        ,   1.33333333,\n",
              "         36.79698292,  -3.21692308],\n",
              "       [124.58569895, 124.29177196,  14.        ,   1.33333333,\n",
              "         43.07479345,  -3.17736264],\n",
              "       [123.92571814, 125.14072302,  15.        ,   1.33333333,\n",
              "         52.88452743,  -3.2010989 ],\n",
              "       ...,\n",
              "       [117.54542323, 118.93175251,  22.        ,   0.66666667,\n",
              "          0.        ,  -3.88153846],\n",
              "       [116.51774276, 118.31285593,  23.        ,   3.33333333,\n",
              "          0.        ,  -3.82615385],\n",
              "       [116.39765477, 117.67520491,  24.        ,   3.33333333,\n",
              "          0.        ,  -3.77868132]])"
            ]
          },
          "metadata": {},
          "execution_count": 450
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final=df_input[predictions.shape[0]*-1:]"
      ],
      "metadata": {
        "id": "a5s5bto0YDFz"
      },
      "execution_count": 451,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_final.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "27vu8jBTYFpW",
        "outputId": "32e1e8ce-a742-42ad-badf-fed4bb3766aa"
      },
      "execution_count": 452,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "regprice    2172\n",
              "price       2172\n",
              "hour        2172\n",
              "wind        2172\n",
              "globrad     2172\n",
              "temp        2172\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 452
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final['Regprice_Pred']=rev_trans[:,0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lsObnHF5YH1f",
        "outputId": "f5761c12-df92-4895-a3aa-22ca961d9cca"
      },
      "execution_count": 453,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-453-97dc24b51eb0>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_final['Regprice_Pred']=rev_trans[:,0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "59MwhVt5Ydgi",
        "outputId": "a8177d80-3420-4ef0-b7e0-0abf37791860"
      },
      "execution_count": 454,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      regprice  price hour  wind  globrad  temp  Regprice_Pred\n",
              "6588     58.89  58.89   13   2.0   105.33  12.3     126.182913\n",
              "6589     57.76  57.76   14   2.0   123.30  12.8     124.585699\n",
              "6590     64.55  64.55   15   2.0   151.38  12.5     123.925718\n",
              "6591     48.00  67.01   16   2.0   124.20  12.0     124.593061\n",
              "6592     54.00  91.36   17   2.0    40.77  11.4     124.022036\n",
              "...        ...    ...  ...   ...      ...   ...            ...\n",
              "8755     15.08  15.08   20   1.0     0.00   4.8     122.265299\n",
              "8756      1.34  11.57   21   1.0     0.00   4.4     119.463977\n",
              "8757     -7.00  14.89   22   1.0     0.00   3.9     117.545423\n",
              "8758     -7.00   9.94   23   5.0     0.00   4.6     116.517743\n",
              "8759     -6.72   4.84   24   5.0     0.00   5.2     116.397655\n",
              "\n",
              "[2172 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89d438a5-5008-42b0-b30d-9eaa84e2123d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "      <th>Regprice_Pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6588</th>\n",
              "      <td>58.89</td>\n",
              "      <td>58.89</td>\n",
              "      <td>13</td>\n",
              "      <td>2.0</td>\n",
              "      <td>105.33</td>\n",
              "      <td>12.3</td>\n",
              "      <td>126.182913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6589</th>\n",
              "      <td>57.76</td>\n",
              "      <td>57.76</td>\n",
              "      <td>14</td>\n",
              "      <td>2.0</td>\n",
              "      <td>123.30</td>\n",
              "      <td>12.8</td>\n",
              "      <td>124.585699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6590</th>\n",
              "      <td>64.55</td>\n",
              "      <td>64.55</td>\n",
              "      <td>15</td>\n",
              "      <td>2.0</td>\n",
              "      <td>151.38</td>\n",
              "      <td>12.5</td>\n",
              "      <td>123.925718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6591</th>\n",
              "      <td>48.00</td>\n",
              "      <td>67.01</td>\n",
              "      <td>16</td>\n",
              "      <td>2.0</td>\n",
              "      <td>124.20</td>\n",
              "      <td>12.0</td>\n",
              "      <td>124.593061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6592</th>\n",
              "      <td>54.00</td>\n",
              "      <td>91.36</td>\n",
              "      <td>17</td>\n",
              "      <td>2.0</td>\n",
              "      <td>40.77</td>\n",
              "      <td>11.4</td>\n",
              "      <td>124.022036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8755</th>\n",
              "      <td>15.08</td>\n",
              "      <td>15.08</td>\n",
              "      <td>20</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>4.8</td>\n",
              "      <td>122.265299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8756</th>\n",
              "      <td>1.34</td>\n",
              "      <td>11.57</td>\n",
              "      <td>21</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>4.4</td>\n",
              "      <td>119.463977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8757</th>\n",
              "      <td>-7.00</td>\n",
              "      <td>14.89</td>\n",
              "      <td>22</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.9</td>\n",
              "      <td>117.545423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>-7.00</td>\n",
              "      <td>9.94</td>\n",
              "      <td>23</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>4.6</td>\n",
              "      <td>116.517743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>-6.72</td>\n",
              "      <td>4.84</td>\n",
              "      <td>24</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>5.2</td>\n",
              "      <td>116.397655</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2172 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89d438a5-5008-42b0-b30d-9eaa84e2123d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-89d438a5-5008-42b0-b30d-9eaa84e2123d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-89d438a5-5008-42b0-b30d-9eaa84e2123d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 454
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "sFmT0_TDRC6b"
      },
      "execution_count": 454,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "X8qDL_7iRbFY"
      },
      "execution_count": 454,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# MAPE \n",
        "\n",
        "\n",
        "def mape(ytest, pred):\n",
        "    ytest, pred = np.array(ytest), np.array(pred)\n",
        "    mape = np.mean(np.abs((ytest - pred) / ytest))\n",
        "    return mape\n",
        "\n",
        "\n",
        "mape_calc = mape(df_final['regprice'], df_final['Regprice_Pred'])\n",
        "\n",
        "# sMAPE def\n",
        "\n",
        "def smape(a, f):\n",
        "    return 1/len(a) * np.sum(2 * np.abs(f-a) / (np.abs(a) + np.abs(f))*100)\n",
        "\n",
        "\n",
        "    #sMAPE:\n",
        "# smape(actual, forecast)\n",
        "\n",
        "smape_calc = smape(df_final['regprice'], df_final['Regprice_Pred'])\n",
        "\n",
        "#MAE\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae_calc = mean_absolute_error(df_final['regprice'], df_final['Regprice_Pred'])\n"
      ],
      "metadata": {
        "id": "KwRRZcoKSHUI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5dead91-ab88-49ae-ff43-f73ee7c35dda"
      },
      "execution_count": 455,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-455-bb756d4d84bf>:6: RuntimeWarning: divide by zero encountered in true_divide\n",
            "  mape = np.mean(np.abs((ytest - pred) / ytest))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#MAE\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae_calc = mean_absolute_error(df_final['regprice'], df_final['Regprice_Pred'])\n"
      ],
      "metadata": {
        "id": "jl7iJxlgwA7Q"
      },
      "execution_count": 456,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "df_final = df_final.tail(744)\n",
        "\n",
        "plt.plot(df_final['regprice'], label='Regulating price', linewidth=1)\n",
        "plt.plot(df_final['Regprice_Pred'], label='Predicted regulating price', linewidth=1, color=\"black\")\n",
        "plt.plot(df_final['price'], label='Spotprice', linewidth=1)\n",
        "\n",
        "\n",
        "# naming of x-axis and y-axis\n",
        "plt.xlabel(\"Time\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.title(\"Predicted regulating prices in SE3 December 2022\")\n",
        "x = list(range(8016,8760,1))\n",
        "#labels = labels = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'H10', 'H11', 'H12', 'H13', 'H14', 'H15','H16', 'H17', 'H18', 'H19', 'H20', 'H21', 'H22', 'H23', 'H24']\n",
        "plt.legend(loc=\"upper right\")"
      ],
      "metadata": {
        "id": "GIcXgan3d_wR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 785
        },
        "outputId": "0798a73e-6306-49f9-dd01-9feef9ea1b68"
      },
      "execution_count": 457,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fddaf76f2b0>"
            ]
          },
          "metadata": {},
          "execution_count": 457
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation: Correct prediction direction. \n",
        "\n",
        "real_spread = df_final['regprice'] - df_final['price']\n",
        "pred_spread = df_final['Regprice_Pred'] - df_final['price']\n",
        "\n",
        "real_spread = real_spread.values\n",
        "pred_spread = pred_spread.values\n",
        "\n",
        "\n",
        "df2 = pd.DataFrame({'Hour' : df_final['hour'], 'Real spread' : real_spread, 'Predicted spread' : pred_spread})  \n",
        "display(df2)\n",
        "\n",
        "conditions = [\n",
        "    (df2['Real spread'] < 0) & (df2['Predicted spread']<0),\n",
        "    (df2['Real spread']> 0) & (df2['Predicted spread']>0),\n",
        "    (df2['Real spread']< 0) & (df2['Predicted spread']>0),\n",
        "    (df2['Real spread']> 0) & (df2['Predicted spread']<0),\n",
        "    (df2['Real spread'] == 0) & (df2['Predicted spread']> -10) & (df2['Predicted spread']< 10)\n",
        "    ]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# create a list of the values we want to assign for each condition\n",
        "values = [1, 1, 0, 0, 1]\n",
        "\n",
        "\n",
        "\n",
        "# create a new column and use np.select to assign values to it using our lists as arguments\n",
        "df2['Correct direction'] = np.select(conditions, values)\n",
        "\n",
        "# display updated DataFrame\n",
        "#df2.head()\n",
        "sum(df2['Correct direction'])/len(df2)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "UUwVXgRdeUbj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "outputId": "855f0e76-18d8-4109-8a78-c19f399677f1"
      },
      "execution_count": 458,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     Hour  Real spread  Predicted spread\n",
              "8016    1         0.95       -139.270941\n",
              "8017    2         0.00       -134.691419\n",
              "8018    3         0.00       -125.945008\n",
              "8019    4         0.00       -114.740686\n",
              "8020    5         0.00       -117.092265\n",
              "...   ...          ...               ...\n",
              "8755   20         0.00        107.185299\n",
              "8756   21       -10.23        107.893977\n",
              "8757   22       -21.89        102.655423\n",
              "8758   23       -16.94        106.577743\n",
              "8759   24       -11.56        111.557655\n",
              "\n",
              "[744 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8df959d1-ba36-4848-a90a-43573de4683a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hour</th>\n",
              "      <th>Real spread</th>\n",
              "      <th>Predicted spread</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8016</th>\n",
              "      <td>1</td>\n",
              "      <td>0.95</td>\n",
              "      <td>-139.270941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8017</th>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-134.691419</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-125.945008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8019</th>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-114.740686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8020</th>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-117.092265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8755</th>\n",
              "      <td>20</td>\n",
              "      <td>0.00</td>\n",
              "      <td>107.185299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8756</th>\n",
              "      <td>21</td>\n",
              "      <td>-10.23</td>\n",
              "      <td>107.893977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8757</th>\n",
              "      <td>22</td>\n",
              "      <td>-21.89</td>\n",
              "      <td>102.655423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>23</td>\n",
              "      <td>-16.94</td>\n",
              "      <td>106.577743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>24</td>\n",
              "      <td>-11.56</td>\n",
              "      <td>111.557655</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>744 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8df959d1-ba36-4848-a90a-43573de4683a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8df959d1-ba36-4848-a90a-43573de4683a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8df959d1-ba36-4848-a90a-43573de4683a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.3118279569892473"
            ]
          },
          "metadata": {},
          "execution_count": 458
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = pd.DataFrame({'Hour' : df_final['hour'], 'Real spread' : real_spread, 'Predicted spread' : pred_spread})  \n",
        "display(df2)\n",
        "\n"
      ],
      "metadata": {
        "id": "ZQg6nSmFjLZ_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "a0726d7e-ff31-47f0-d682-27bdfffae44b"
      },
      "execution_count": 459,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     Hour  Real spread  Predicted spread\n",
              "8016    1         0.95       -139.270941\n",
              "8017    2         0.00       -134.691419\n",
              "8018    3         0.00       -125.945008\n",
              "8019    4         0.00       -114.740686\n",
              "8020    5         0.00       -117.092265\n",
              "...   ...          ...               ...\n",
              "8755   20         0.00        107.185299\n",
              "8756   21       -10.23        107.893977\n",
              "8757   22       -21.89        102.655423\n",
              "8758   23       -16.94        106.577743\n",
              "8759   24       -11.56        111.557655\n",
              "\n",
              "[744 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6b8b7b4-9425-4e1c-b60c-e6dda6a194b8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hour</th>\n",
              "      <th>Real spread</th>\n",
              "      <th>Predicted spread</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8016</th>\n",
              "      <td>1</td>\n",
              "      <td>0.95</td>\n",
              "      <td>-139.270941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8017</th>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-134.691419</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-125.945008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8019</th>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-114.740686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8020</th>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-117.092265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8755</th>\n",
              "      <td>20</td>\n",
              "      <td>0.00</td>\n",
              "      <td>107.185299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8756</th>\n",
              "      <td>21</td>\n",
              "      <td>-10.23</td>\n",
              "      <td>107.893977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8757</th>\n",
              "      <td>22</td>\n",
              "      <td>-21.89</td>\n",
              "      <td>102.655423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8758</th>\n",
              "      <td>23</td>\n",
              "      <td>-16.94</td>\n",
              "      <td>106.577743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8759</th>\n",
              "      <td>24</td>\n",
              "      <td>-11.56</td>\n",
              "      <td>111.557655</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>744 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6b8b7b4-9425-4e1c-b60c-e6dda6a194b8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b6b8b7b4-9425-4e1c-b60c-e6dda6a194b8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b6b8b7b4-9425-4e1c-b60c-e6dda6a194b8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "Pp-8-fteRglU"
      },
      "execution_count": 459,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Evaluation metrics \n",
        "\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# MAPE \n",
        "\n",
        "\n",
        "def mape(ytest, pred):\n",
        "    ytest, pred = np.array(ytest), np.array(pred)\n",
        "    mape = np.mean(np.abs((ytest - pred) / ytest))\n",
        "    return mape\n",
        "\n",
        "\n",
        "mape_calc = mape(df_final['regprice'], df_final['Regprice_Pred'])\n",
        "\n",
        "# sMAPE def\n",
        "\n",
        "def smape(a, f):\n",
        "    return 1/len(a) * np.sum(2 * np.abs(f-a) / (np.abs(a) + np.abs(f))*100)\n",
        "\n",
        "\n",
        "    #sMAPE:\n",
        "# smape(actual, forecast)\n",
        "\n",
        "smape_calc = smape(df_final['regprice'], df_final['Regprice_Pred'])\n",
        "\n",
        "#MAE\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae_calc = mean_absolute_error(df_final['regprice'], df_final['Regprice_Pred'])\n",
        "\n",
        "#(actual, pred)\n",
        "\n",
        "\n",
        "#calculate RMSE\n",
        "rmse_calc = sqrt(mean_squared_error(df_final['regprice'], df_final['Regprice_Pred'])) \n",
        "\n",
        "import math\n",
        "\n",
        " \n",
        "MSE = np.square(np.subtract(df_final['regprice'],df_final['Regprice_Pred'])).mean() \n",
        " \n",
        "\n",
        "print(\"MSE:\", MSE)\n",
        "print(\"RMSE:\", rmse_calc)\n",
        "print(\"MAPE:\", mape_calc)\n",
        "print(\"sMAPE:\", smape_calc)\n",
        "print(\"MAE:\", mae_calc) "
      ],
      "metadata": {
        "id": "XFia_eveTejl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a436dc57-1877-4a2a-ad87-6d0505c43bb1"
      },
      "execution_count": 460,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE: 32289.26637704341\n",
            "RMSE: 179.6921433369957\n",
            "MAPE: 1.917288336652618\n",
            "sMAPE: 73.52340802465312\n",
            "MAE: 141.2951526419051\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "k1HqLCH2whTS"
      },
      "execution_count": 460,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "6uOBG5GCGmtz"
      },
      "execution_count": 460,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# using the model on unseen test data\n",
        "#df_test=pd.read_csv(\"/content/test_SE4_spot_hour.csv\", sep = ',')\n",
        "#df_test = df_test.replace(np. nan,0)\n",
        "#df_test['hour'] = df_test['hour'].map(lambda x: x.lstrip('H'))\n",
        "\n",
        "#2 january\n",
        "df_test=pd.read_csv(\"/content/test_SE3_spot_reg_weather_notvols.csv\", sep = ',')\n",
        "df_test = df_test.replace(np. nan,0)\n",
        "\n",
        "\n",
        "df_test['hour'] = df_test['hour'].apply(str)\n",
        "#df_test['hour'] = str(df_test['hour'])\n",
        "df_test['hour'] = df_test['hour'].map(lambda x: x.lstrip('H'))\n",
        "\n",
        "\n",
        "df_test['datetime'] = pd.to_datetime(df_test['datetime'], infer_datetime_format=True)\n",
        "\n",
        "\n",
        "df_test.drop(index=df_test.index[:47], axis=0, inplace=True)\n",
        "df_test.drop(index=df_test.index[13:], axis=0, inplace=True)\n",
        "\n",
        "print(df)\n",
        "df_test\n",
        "\n",
        "#df_input=df[['regprice','price', 'hour']] #I want to change this to hour\n",
        "#xtest2=df[['price', 'hour']] \n",
        "#ytest2=df[['regprice']] \n",
        "\n",
        "\n",
        "#df_test=pd.read_csv(\"/content/test_SE4_spot_hour.csv\", sep = ',')\n",
        "#df_test = df_test.replace(np. nan,0)\n",
        "#df_test['hour'] = df_test['hour'].map(lambda x: x.lstrip('H'))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#test_generator2 = TimeseriesGenerator(xtest2, ytest2, length=4, sampling_rate=1, batch_size=2)\n",
        "\n",
        "#predictions2 = model.predict_generator(test_generator2)\n",
        "\n",
        "#df_input\n",
        "\n",
        "#xtest2 = np.asarray(xtest2).astype('float32')\n",
        "\n",
        "#yhat = model.predict_generator(xtest2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 700
        },
        "id": "VjuZYtROIElZ",
        "outputId": "6eb2725c-f10d-4894-9a9e-aa520428d826"
      },
      "execution_count": 461,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                datetime hour  price  regprice  temp  wind  globrad\n",
            "0    2022-01-01 00:00:00    1  46.60     46.60   0.7   2.0      0.0\n",
            "1    2022-01-01 01:00:00    2  41.33     41.33   0.4   2.0      0.0\n",
            "2    2022-01-01 02:00:00    3  42.18     42.18   0.7   3.0      0.0\n",
            "3    2022-01-01 03:00:00    4  44.37     44.37   0.7   5.0      0.0\n",
            "4    2022-01-01 04:00:00    5  37.67     37.67   0.3   5.0      0.0\n",
            "...                  ...  ...    ...       ...   ...   ...      ...\n",
            "8755 2022-12-31 19:00:00   20  15.08     15.08   4.8   1.0      0.0\n",
            "8756 2022-12-31 20:00:00   21  11.57      1.34   4.4   1.0      0.0\n",
            "8757 2022-12-31 21:00:00   22  14.89     -7.00   3.9   1.0      0.0\n",
            "8758 2022-12-31 22:00:00   23   9.94     -7.00   4.6   5.0      0.0\n",
            "8759 2022-12-31 23:00:00   24   4.84     -6.72   5.2   5.0      0.0\n",
            "\n",
            "[8760 rows x 7 columns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              datetime hour   price  regprice  temp  wind  globrad\n",
              "47 2023-01-01 23:00:00   24   35.00     35.00   3.0     1     0.00\n",
              "48 2023-01-02 00:00:00    1   57.91     57.91   0.4     0     0.00\n",
              "49 2023-01-02 01:00:00    2   51.67     76.43   1.3     1     0.00\n",
              "50 2023-01-02 02:00:00    3   52.86     85.63   1.9     3     0.00\n",
              "51 2023-01-02 03:00:00    4   44.16     32.27   2.4     4     0.00\n",
              "52 2023-01-02 04:00:00    5   50.08     50.08   2.8     3     0.00\n",
              "53 2023-01-02 05:00:00    6   70.73     70.73   3.3     3     0.00\n",
              "54 2023-01-02 06:00:00    7  102.56     43.00   3.7     5     0.00\n",
              "55 2023-01-02 07:00:00    8  138.19    138.19   4.1     4     0.17\n",
              "56 2023-01-02 08:00:00    9  145.98    145.98   4.5     4     4.76\n",
              "57 2023-01-02 09:00:00   10  147.05    125.00   4.8     5    22.15\n",
              "58 2023-01-02 10:00:00   11  145.61    115.09   5.0     5    27.19\n",
              "59 2023-01-02 11:00:00   12  143.35    153.50   5.0     4    15.48"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dfb7c2c2-0442-4fec-9835-99a9ecf3bfca\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>price</th>\n",
              "      <th>regprice</th>\n",
              "      <th>temp</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>2023-01-01 23:00:00</td>\n",
              "      <td>24</td>\n",
              "      <td>35.00</td>\n",
              "      <td>35.00</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>2023-01-02 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>57.91</td>\n",
              "      <td>57.91</td>\n",
              "      <td>0.4</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>2023-01-02 01:00:00</td>\n",
              "      <td>2</td>\n",
              "      <td>51.67</td>\n",
              "      <td>76.43</td>\n",
              "      <td>1.3</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>2023-01-02 02:00:00</td>\n",
              "      <td>3</td>\n",
              "      <td>52.86</td>\n",
              "      <td>85.63</td>\n",
              "      <td>1.9</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2023-01-02 03:00:00</td>\n",
              "      <td>4</td>\n",
              "      <td>44.16</td>\n",
              "      <td>32.27</td>\n",
              "      <td>2.4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2023-01-02 04:00:00</td>\n",
              "      <td>5</td>\n",
              "      <td>50.08</td>\n",
              "      <td>50.08</td>\n",
              "      <td>2.8</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2023-01-02 05:00:00</td>\n",
              "      <td>6</td>\n",
              "      <td>70.73</td>\n",
              "      <td>70.73</td>\n",
              "      <td>3.3</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2023-01-02 06:00:00</td>\n",
              "      <td>7</td>\n",
              "      <td>102.56</td>\n",
              "      <td>43.00</td>\n",
              "      <td>3.7</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2023-01-02 07:00:00</td>\n",
              "      <td>8</td>\n",
              "      <td>138.19</td>\n",
              "      <td>138.19</td>\n",
              "      <td>4.1</td>\n",
              "      <td>4</td>\n",
              "      <td>0.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>2023-01-02 08:00:00</td>\n",
              "      <td>9</td>\n",
              "      <td>145.98</td>\n",
              "      <td>145.98</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4</td>\n",
              "      <td>4.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>2023-01-02 09:00:00</td>\n",
              "      <td>10</td>\n",
              "      <td>147.05</td>\n",
              "      <td>125.00</td>\n",
              "      <td>4.8</td>\n",
              "      <td>5</td>\n",
              "      <td>22.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>2023-01-02 10:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>145.61</td>\n",
              "      <td>115.09</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>2023-01-02 11:00:00</td>\n",
              "      <td>12</td>\n",
              "      <td>143.35</td>\n",
              "      <td>153.50</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4</td>\n",
              "      <td>15.48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfb7c2c2-0442-4fec-9835-99a9ecf3bfca')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dfb7c2c2-0442-4fec-9835-99a9ecf3bfca button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dfb7c2c2-0442-4fec-9835-99a9ecf3bfca');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 461
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#testdata try regprice\tregvol.up\tregvol.down\tregvol.dd\tspread\n",
        "\n",
        "\n",
        "df_test_input=df_test[['regprice','price', 'hour', \"wind\", \"globrad\", \"temp\"]] \n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "data_scaled=scaler.fit_transform(df_test_input) # should this be changed or not? \n",
        "features_test = data_scaled\n",
        "target_test = data_scaled[:,0]\n",
        "TimeseriesGenerator(features_test,target_test,length=lookback,sampling_rate=1,batch_size=64)[0]\n",
        "xtrain_test,xtest_test,ytrain_test,ytest_test=train_test_split(features,target,test_size=13,random_state=123,shuffle=False) \n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "0xt_LNwOrKuJ"
      },
      "execution_count": 462,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_input"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "3eueViLs6tgh",
        "outputId": "2d6bc426-8427-40e9-f121-60786c47d5aa"
      },
      "execution_count": 463,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    regprice   price hour  wind  globrad  temp\n",
              "47     35.00   35.00   24     1     0.00   3.0\n",
              "48     57.91   57.91    1     0     0.00   0.4\n",
              "49     76.43   51.67    2     1     0.00   1.3\n",
              "50     85.63   52.86    3     3     0.00   1.9\n",
              "51     32.27   44.16    4     4     0.00   2.4\n",
              "52     50.08   50.08    5     3     0.00   2.8\n",
              "53     70.73   70.73    6     3     0.00   3.3\n",
              "54     43.00  102.56    7     5     0.00   3.7\n",
              "55    138.19  138.19    8     4     0.17   4.1\n",
              "56    145.98  145.98    9     4     4.76   4.5\n",
              "57    125.00  147.05   10     5    22.15   4.8\n",
              "58    115.09  145.61   11     5    27.19   5.0\n",
              "59    153.50  143.35   12     4    15.48   5.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c369c8c9-4c51-4ca1-b973-358dcab87831\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>35.00</td>\n",
              "      <td>35.00</td>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>57.91</td>\n",
              "      <td>57.91</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>76.43</td>\n",
              "      <td>51.67</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>85.63</td>\n",
              "      <td>52.86</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>32.27</td>\n",
              "      <td>44.16</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>50.08</td>\n",
              "      <td>50.08</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>70.73</td>\n",
              "      <td>70.73</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>43.00</td>\n",
              "      <td>102.56</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>138.19</td>\n",
              "      <td>138.19</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>0.17</td>\n",
              "      <td>4.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>145.98</td>\n",
              "      <td>145.98</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>4.76</td>\n",
              "      <td>4.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>125.00</td>\n",
              "      <td>147.05</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>22.15</td>\n",
              "      <td>4.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>115.09</td>\n",
              "      <td>145.61</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>27.19</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>153.50</td>\n",
              "      <td>143.35</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>15.48</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c369c8c9-4c51-4ca1-b973-358dcab87831')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c369c8c9-4c51-4ca1-b973-358dcab87831 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c369c8c9-4c51-4ca1-b973-358dcab87831');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 463
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZ4j6IdHrqqd",
        "outputId": "2763c600-12af-4747-b3b3-e17c1e81ffee"
      },
      "execution_count": 464,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13,)"
            ]
          },
          "metadata": {},
          "execution_count": 464
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_generator_test = TimeseriesGenerator(xtest_test, ytest_test, length=1, sampling_rate=1, batch_size=24)\n",
        "\n",
        "#test_generator = TimeseriesGenerator(xtest, ytest, length=win_length, sampling_rate=1, batch_size=batch_size)\n"
      ],
      "metadata": {
        "id": "20Crq1mArx0f"
      },
      "execution_count": 465,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate_generator(test_generator_test,verbose=0)\n",
        "predictions_test = model.predict_generator(test_generator_test)\n",
        "predictions_test.shape\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z7fmukCvr1_x",
        "outputId": "864d1250-be7d-4c12-85f6-e5b0b6a37f99"
      },
      "execution_count": 466,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-466-0e33a1aee9b7>:1: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
            "  model.evaluate_generator(test_generator_test,verbose=0)\n",
            "<ipython-input-466-0e33a1aee9b7>:2: UserWarning: `Model.predict_generator` is deprecated and will be removed in a future version. Please use `Model.predict`, which supports generators.\n",
            "  predictions_test = model.predict_generator(test_generator_test)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 466
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "Pbxc81mV0ha-"
      },
      "execution_count": 466,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ytest_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Fp8ApvB4rkL",
        "outputId": "0623a1dc-4f75-4817-c1c4-60b520ebade3"
      },
      "execution_count": 467,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13,)"
            ]
          },
          "metadata": {},
          "execution_count": 467
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hE1JoXvs4vhp",
        "outputId": "a09c6462-e69d-4869-9add-eae1021a5040"
      },
      "execution_count": 468,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 468
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "xtest_test[:,1:][win_length:]\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ez7xUY9-4xhO",
        "outputId": "aafedcd9-4c79-49bc-f522-da6af2a17501"
      },
      "execution_count": 469,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([], shape=(0, 5), dtype=float64)"
            ]
          },
          "metadata": {},
          "execution_count": 469
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred_test=pd.concat([pd.DataFrame(predictions_test), pd.DataFrame(xtest_test[:,1:][win_length:])],axis=1)\n",
        "df_pred_test\n",
        "rev_trans_test=scaler.inverse_transform(df_pred_test)"
      ],
      "metadata": {
        "id": "KVd0FQnI48KD"
      },
      "execution_count": 470,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rev_trans_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dSpSi3Qasj8l",
        "outputId": "5dc2b61f-a031-4bf8-90ef-1a80be4e7b4f"
      },
      "execution_count": 471,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 471
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_final=df_test_input[predictions_test.shape[0]*-1:]\n",
        "df_test_final.count()\n",
        "#df_test_final['Regprice_Pred']=rev_trans[:,0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KJmGQKoEs6kr",
        "outputId": "a7a65aad-bb16-4666-b173-1202126c38cb"
      },
      "execution_count": 472,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "regprice    12\n",
              "price       12\n",
              "hour        12\n",
              "wind        12\n",
              "globrad     12\n",
              "temp        12\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 472
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_input[predictions_test.shape[0]*-1:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "P0B1SJuW6UlL",
        "outputId": "12ca0d62-be9e-483e-d951-73ba7df350ff"
      },
      "execution_count": 473,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    regprice   price hour  wind  globrad  temp\n",
              "48     57.91   57.91    1     0     0.00   0.4\n",
              "49     76.43   51.67    2     1     0.00   1.3\n",
              "50     85.63   52.86    3     3     0.00   1.9\n",
              "51     32.27   44.16    4     4     0.00   2.4\n",
              "52     50.08   50.08    5     3     0.00   2.8\n",
              "53     70.73   70.73    6     3     0.00   3.3\n",
              "54     43.00  102.56    7     5     0.00   3.7\n",
              "55    138.19  138.19    8     4     0.17   4.1\n",
              "56    145.98  145.98    9     4     4.76   4.5\n",
              "57    125.00  147.05   10     5    22.15   4.8\n",
              "58    115.09  145.61   11     5    27.19   5.0\n",
              "59    153.50  143.35   12     4    15.48   5.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fb3c6ca1-485d-4a56-86ce-ed57be398d3d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>57.91</td>\n",
              "      <td>57.91</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>76.43</td>\n",
              "      <td>51.67</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>85.63</td>\n",
              "      <td>52.86</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>32.27</td>\n",
              "      <td>44.16</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>50.08</td>\n",
              "      <td>50.08</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>70.73</td>\n",
              "      <td>70.73</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>43.00</td>\n",
              "      <td>102.56</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>138.19</td>\n",
              "      <td>138.19</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>0.17</td>\n",
              "      <td>4.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>145.98</td>\n",
              "      <td>145.98</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>4.76</td>\n",
              "      <td>4.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>125.00</td>\n",
              "      <td>147.05</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>22.15</td>\n",
              "      <td>4.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>115.09</td>\n",
              "      <td>145.61</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>27.19</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>153.50</td>\n",
              "      <td>143.35</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>15.48</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb3c6ca1-485d-4a56-86ce-ed57be398d3d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fb3c6ca1-485d-4a56-86ce-ed57be398d3d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fb3c6ca1-485d-4a56-86ce-ed57be398d3d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 473
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_final=df_test_input[predictions_test.shape[0]*-1:]\n",
        "df_test_final.count()\n",
        "df_test_final['Regprice_Pred']=rev_trans_test[:,0]\n",
        "\n",
        "\n",
        "df_final_test = df_test_final\n",
        "\n",
        "df_final_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 529
        },
        "id": "AsgyUOtIsNul",
        "outputId": "6deac81d-26ce-4c13-ad84-01b9c431e7b4"
      },
      "execution_count": 474,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-474-ca6d922f549f>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_test_final['Regprice_Pred']=rev_trans_test[:,0]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    regprice   price hour  wind  globrad  temp  Regprice_Pred\n",
              "48     57.91   57.91    1     0     0.00   0.4      38.960649\n",
              "49     76.43   51.67    2     1     0.00   1.3      39.151353\n",
              "50     85.63   52.86    3     3     0.00   1.9      39.352582\n",
              "51     32.27   44.16    4     4     0.00   2.4      40.216385\n",
              "52     50.08   50.08    5     3     0.00   2.8      41.278423\n",
              "53     70.73   70.73    6     3     0.00   3.3      44.239338\n",
              "54     43.00  102.56    7     5     0.00   3.7      44.312498\n",
              "55    138.19  138.19    8     4     0.17   4.1      41.636592\n",
              "56    145.98  145.98    9     4     4.76   4.5      40.970688\n",
              "57    125.00  147.05   10     5    22.15   4.8      40.232593\n",
              "58    115.09  145.61   11     5    27.19   5.0      39.875187\n",
              "59    153.50  143.35   12     4    15.48   5.0      39.991982"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0249358-19da-4dc6-9237-8bfe6e7dc14c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "      <th>Regprice_Pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>57.91</td>\n",
              "      <td>57.91</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.4</td>\n",
              "      <td>38.960649</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>76.43</td>\n",
              "      <td>51.67</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.3</td>\n",
              "      <td>39.151353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>85.63</td>\n",
              "      <td>52.86</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>39.352582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>32.27</td>\n",
              "      <td>44.16</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.4</td>\n",
              "      <td>40.216385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>50.08</td>\n",
              "      <td>50.08</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.8</td>\n",
              "      <td>41.278423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>70.73</td>\n",
              "      <td>70.73</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.3</td>\n",
              "      <td>44.239338</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>43.00</td>\n",
              "      <td>102.56</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.7</td>\n",
              "      <td>44.312498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>138.19</td>\n",
              "      <td>138.19</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>0.17</td>\n",
              "      <td>4.1</td>\n",
              "      <td>41.636592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>145.98</td>\n",
              "      <td>145.98</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>4.76</td>\n",
              "      <td>4.5</td>\n",
              "      <td>40.970688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>125.00</td>\n",
              "      <td>147.05</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>22.15</td>\n",
              "      <td>4.8</td>\n",
              "      <td>40.232593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>115.09</td>\n",
              "      <td>145.61</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>27.19</td>\n",
              "      <td>5.0</td>\n",
              "      <td>39.875187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>153.50</td>\n",
              "      <td>143.35</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>15.48</td>\n",
              "      <td>5.0</td>\n",
              "      <td>39.991982</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0249358-19da-4dc6-9237-8bfe6e7dc14c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0249358-19da-4dc6-9237-8bfe6e7dc14c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0249358-19da-4dc6-9237-8bfe6e7dc14c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 474
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(df_final_test['regprice'], label='Regulating price', linewidth=1)\n",
        "plt.plot(df_final_test['Regprice_Pred'], label='Predicted regulating price', linewidth=1, color=\"black\")\n",
        "plt.plot(df_final_test['price'], label='Spotprice', linewidth=1)\n",
        "\n",
        "\n",
        "# naming of x-axis and y-axis\n",
        "plt.xlabel(\"Time\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.title(\"Predicted regulating prices H1-H12 02-01-2023\")\n",
        "x = list(range(8016,8760,1))\n",
        "#labels = labels = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'H10', 'H11', 'H12', 'H13', 'H14', 'H15','H16', 'H17', 'H18', 'H19', 'H20', 'H21', 'H22', 'H23', 'H24']\n",
        "plt.legend(loc=\"upper right\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 785
        },
        "id": "sVJ53ELMMkkQ",
        "outputId": "a362f221-675a-4f5e-e675-e2ebcbf4659c"
      },
      "execution_count": 475,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fddaf657d00>"
            ]
          },
          "metadata": {},
          "execution_count": 475
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Evaluation metrics \n",
        "\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# MAPE \n",
        "\n",
        "\n",
        "def mape(ytest, pred):\n",
        "    ytest, pred = np.array(ytest), np.array(pred)\n",
        "    mape = np.mean(np.abs((ytest - pred) / ytest))\n",
        "    return mape\n",
        "\n",
        "\n",
        "mape_calc = mape(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n"
      ],
      "metadata": {
        "id": "CLSwTL9w9k0g"
      },
      "execution_count": 476,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# sMAPE def\n",
        "\n",
        "def smape(a, f):\n",
        "    return 1/len(a) * np.sum(2 * np.abs(f-a) / (np.abs(a) + np.abs(f))*100)\n",
        "\n",
        "\n",
        "    #sMAPE:\n",
        "# smape(actual, forecast)\n",
        "\n",
        "smape_calc = smape(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "#MAE\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae_calc = mean_absolute_error(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "#(actual, pred)\n",
        "\n",
        "\n",
        "#calculate RMSE\n",
        "rmse_calc = sqrt(mean_squared_error(df_final_test['regprice'], df_final_test['Regprice_Pred'])) \n",
        "\n",
        "import math\n",
        "\n",
        " \n",
        "MSE = np.square(np.subtract(df_final_test['regprice'],df_final_test['Regprice_Pred'])).mean() \n",
        " \n",
        "\n",
        "print(\"MSE:\", MSE)\n",
        "print(\"RMSE:\", rmse_calc)\n",
        "print(\"MAPE:\", mape_calc)\n",
        "print(\"sMAPE:\", smape_calc)\n",
        "print(\"MAE:\", mae_calc) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6dOlaQnC-gJL",
        "outputId": "f0192e17-e4ff-46ff-fe5c-471f8684fedc"
      },
      "execution_count": 477,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE: 4234.236104891158\n",
            "RMSE: 65.07100817484817\n",
            "MAPE: 0.47263609750178476\n",
            "sMAPE: 67.05776354768525\n",
            "MAE: 51.84245808204636\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation: Correct prediction direction. \n",
        "\n",
        "real_spread = df_final_test['regprice'] - df_final_test['price']\n",
        "pred_spread = df_final_test['Regprice_Pred'] - df_final_test['price']\n",
        "\n",
        "real_spread = real_spread.values\n",
        "pred_spread = pred_spread.values\n",
        "\n",
        "\n",
        "df2_test = pd.DataFrame({'Hour' : df_final_test['hour'], 'Real spread' : real_spread, 'Predicted spread' : pred_spread})  \n",
        "display(df2_test)\n",
        "\n",
        "\n",
        "\n",
        "conditions = [\n",
        "    (df2_test['Real spread'] < 0) & (df2_test['Predicted spread']<0),\n",
        "    (df2_test['Real spread']> 0) & (df2_test['Predicted spread']>0),\n",
        "    (df2_test['Real spread']< 0) & (df2_test['Predicted spread']>0),\n",
        "    (df2_test['Real spread']> 0) & (df2_test['Predicted spread']<0),\n",
        "    (df2_test['Real spread']== 0) & (df2_test['Predicted spread']> -10) & (df2_test['Predicted spread']< 10)\n",
        "    ]\n",
        "\n",
        "# create a list of the values we want to assign for each condition\n",
        "values = [1, 1, 0, 0, 1]\n",
        "\n",
        "# create a new column and use np.select to assign values to it using our lists as arguments\n",
        "df2_test['Correct direction'] = np.select(conditions, values)\n",
        "\n",
        "# display updated DataFrame\n",
        "#df2.head()\n",
        "sum(df2_test['Correct direction'])/len(df2_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "ninzx0SdKVae",
        "outputId": "da1f5349-043b-431b-b5f7-94ee65bd67e2"
      },
      "execution_count": 478,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   Hour  Real spread  Predicted spread\n",
              "48    1         0.00        -18.949351\n",
              "49    2        24.76        -12.518647\n",
              "50    3        32.77        -13.507418\n",
              "51    4       -11.89         -3.943615\n",
              "52    5         0.00         -8.801577\n",
              "53    6         0.00        -26.490662\n",
              "54    7       -59.56        -58.247502\n",
              "55    8         0.00        -96.553408\n",
              "56    9         0.00       -105.009312\n",
              "57   10       -22.05       -106.817407\n",
              "58   11       -30.52       -105.734813\n",
              "59   12        10.15       -103.358018"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2756aca7-680a-40fd-acae-07d6c30cb0e7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hour</th>\n",
              "      <th>Real spread</th>\n",
              "      <th>Predicted spread</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-18.949351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>2</td>\n",
              "      <td>24.76</td>\n",
              "      <td>-12.518647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>3</td>\n",
              "      <td>32.77</td>\n",
              "      <td>-13.507418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>4</td>\n",
              "      <td>-11.89</td>\n",
              "      <td>-3.943615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-8.801577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-26.490662</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>7</td>\n",
              "      <td>-59.56</td>\n",
              "      <td>-58.247502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-96.553408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>9</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-105.009312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>10</td>\n",
              "      <td>-22.05</td>\n",
              "      <td>-106.817407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>11</td>\n",
              "      <td>-30.52</td>\n",
              "      <td>-105.734813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>12</td>\n",
              "      <td>10.15</td>\n",
              "      <td>-103.358018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2756aca7-680a-40fd-acae-07d6c30cb0e7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2756aca7-680a-40fd-acae-07d6c30cb0e7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2756aca7-680a-40fd-acae-07d6c30cb0e7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4166666666666667"
            ]
          },
          "metadata": {},
          "execution_count": 478
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Second february\n",
        "#6 february\n",
        "df_test_0202=pd.read_csv(\"/content/test_SE3_spot_weather_0206.csv\", sep = ',')\n",
        "df_test_0202 = df_test_0202.replace(np. nan,0)\n",
        "\n",
        "\n",
        "df_test_0202['hour'] = df_test_0202['hour'].apply(str)\n",
        "#df_test_0202['hour'] = str(df_test_0202['hour'])\n",
        "df_test_0202['hour'] = df_test_0202['hour'].map(lambda x: x.lstrip('H'))\n",
        "\n",
        "\n",
        "df_test_0202['datetime'] = pd.to_datetime(df_test_0202['datetime'], infer_datetime_format=True)\n",
        "\n",
        "\n",
        "df_test_0202.drop(index=df_test_0202.index[:324], axis=0, inplace=True)\n",
        "df_test_0202.drop(index=df_test_0202.index[13:], axis=0, inplace=True)\n",
        "\n",
        "print(df)\n",
        "df_test_0202\n"
      ],
      "metadata": {
        "id": "cpCfoWplMOQz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 700
        },
        "outputId": "afb29ab8-71cf-4d03-bf85-963d3a1ea155"
      },
      "execution_count": 479,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                datetime hour  price  regprice  temp  wind  globrad\n",
            "0    2022-01-01 00:00:00    1  46.60     46.60   0.7   2.0      0.0\n",
            "1    2022-01-01 01:00:00    2  41.33     41.33   0.4   2.0      0.0\n",
            "2    2022-01-01 02:00:00    3  42.18     42.18   0.7   3.0      0.0\n",
            "3    2022-01-01 03:00:00    4  44.37     44.37   0.7   5.0      0.0\n",
            "4    2022-01-01 04:00:00    5  37.67     37.67   0.3   5.0      0.0\n",
            "...                  ...  ...    ...       ...   ...   ...      ...\n",
            "8755 2022-12-31 19:00:00   20  15.08     15.08   4.8   1.0      0.0\n",
            "8756 2022-12-31 20:00:00   21  11.57      1.34   4.4   1.0      0.0\n",
            "8757 2022-12-31 21:00:00   22  14.89     -7.00   3.9   1.0      0.0\n",
            "8758 2022-12-31 22:00:00   23   9.94     -7.00   4.6   5.0      0.0\n",
            "8759 2022-12-31 23:00:00   24   4.84     -6.72   5.2   5.0      0.0\n",
            "\n",
            "[8760 rows x 7 columns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               datetime hour   price  regprice  temp  wind  globrad\n",
              "324 2023-02-05 23:00:00   24   74.15     23.50  -6.3     3     0.00\n",
              "325 2023-02-06 00:00:00    1  105.25    105.25  -2.5     2     0.00\n",
              "326 2023-02-06 01:00:00    2   84.93     84.93  -3.0     4     0.00\n",
              "327 2023-02-06 02:00:00    3   79.08     79.08  -3.2     4     0.00\n",
              "328 2023-02-06 03:00:00    4   89.99     89.99  -3.5     4     0.00\n",
              "329 2023-02-06 04:00:00    5  120.01    120.01  -3.5     4     0.00\n",
              "330 2023-02-06 05:00:00    6  126.26    108.50  -3.1     3     0.00\n",
              "331 2023-02-06 06:00:00    7  175.67    114.00  -3.2     3     3.22\n",
              "332 2023-02-06 07:00:00    8  200.65    200.65  -1.9     4    27.99\n",
              "333 2023-02-06 08:00:00    9  213.39    213.39  -0.5     3   126.73\n",
              "334 2023-02-06 09:00:00   10  200.65    200.65  -0.2     2   209.49\n",
              "335 2023-02-06 10:00:00   11  185.08    185.08  -0.1     3   228.66\n",
              "336 2023-02-06 11:00:00   12  179.84    335.83   0.1     2   219.21"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3df06d5f-976d-4692-b82c-43e7fe2b776c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>price</th>\n",
              "      <th>regprice</th>\n",
              "      <th>temp</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>324</th>\n",
              "      <td>2023-02-05 23:00:00</td>\n",
              "      <td>24</td>\n",
              "      <td>74.15</td>\n",
              "      <td>23.50</td>\n",
              "      <td>-6.3</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>325</th>\n",
              "      <td>2023-02-06 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>105.25</td>\n",
              "      <td>105.25</td>\n",
              "      <td>-2.5</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>2023-02-06 01:00:00</td>\n",
              "      <td>2</td>\n",
              "      <td>84.93</td>\n",
              "      <td>84.93</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>2023-02-06 02:00:00</td>\n",
              "      <td>3</td>\n",
              "      <td>79.08</td>\n",
              "      <td>79.08</td>\n",
              "      <td>-3.2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>2023-02-06 03:00:00</td>\n",
              "      <td>4</td>\n",
              "      <td>89.99</td>\n",
              "      <td>89.99</td>\n",
              "      <td>-3.5</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>2023-02-06 04:00:00</td>\n",
              "      <td>5</td>\n",
              "      <td>120.01</td>\n",
              "      <td>120.01</td>\n",
              "      <td>-3.5</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>2023-02-06 05:00:00</td>\n",
              "      <td>6</td>\n",
              "      <td>126.26</td>\n",
              "      <td>108.50</td>\n",
              "      <td>-3.1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>2023-02-06 06:00:00</td>\n",
              "      <td>7</td>\n",
              "      <td>175.67</td>\n",
              "      <td>114.00</td>\n",
              "      <td>-3.2</td>\n",
              "      <td>3</td>\n",
              "      <td>3.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>2023-02-06 07:00:00</td>\n",
              "      <td>8</td>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>-1.9</td>\n",
              "      <td>4</td>\n",
              "      <td>27.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>2023-02-06 08:00:00</td>\n",
              "      <td>9</td>\n",
              "      <td>213.39</td>\n",
              "      <td>213.39</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>3</td>\n",
              "      <td>126.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>2023-02-06 09:00:00</td>\n",
              "      <td>10</td>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>-0.2</td>\n",
              "      <td>2</td>\n",
              "      <td>209.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>2023-02-06 10:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>185.08</td>\n",
              "      <td>185.08</td>\n",
              "      <td>-0.1</td>\n",
              "      <td>3</td>\n",
              "      <td>228.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>2023-02-06 11:00:00</td>\n",
              "      <td>12</td>\n",
              "      <td>179.84</td>\n",
              "      <td>335.83</td>\n",
              "      <td>0.1</td>\n",
              "      <td>2</td>\n",
              "      <td>219.21</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3df06d5f-976d-4692-b82c-43e7fe2b776c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3df06d5f-976d-4692-b82c-43e7fe2b776c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3df06d5f-976d-4692-b82c-43e7fe2b776c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 479
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_test_0202_input=df_test_0202[['regprice','price', 'hour', \"wind\", \"globrad\", \"temp\"]] \n",
        "scaler = MinMaxScaler()"
      ],
      "metadata": {
        "id": "6KMQUqFfUcYG"
      },
      "execution_count": 480,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_scaled=scaler.fit_transform(df_test_0202_input) # should this be changed or not? \n",
        "features_test = data_scaled\n",
        "target_test = data_scaled[:,0]\n",
        "TimeseriesGenerator(features_test,target_test,length=lookback,sampling_rate=1,batch_size=64)[0]\n",
        "xtrain_test,xtest_test,ytrain_test,ytest_test=train_test_split(features,target,test_size=13,random_state=123,shuffle=False) \n",
        "\n"
      ],
      "metadata": {
        "id": "YgtvwSEaUeXB"
      },
      "execution_count": 481,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0202_input\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "prRhWiXPUgRO",
        "outputId": "f758455f-003d-45a2-a296-44ad02606ddb"
      },
      "execution_count": 482,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     regprice   price hour  wind  globrad  temp\n",
              "324     23.50   74.15   24     3     0.00  -6.3\n",
              "325    105.25  105.25    1     2     0.00  -2.5\n",
              "326     84.93   84.93    2     4     0.00  -3.0\n",
              "327     79.08   79.08    3     4     0.00  -3.2\n",
              "328     89.99   89.99    4     4     0.00  -3.5\n",
              "329    120.01  120.01    5     4     0.00  -3.5\n",
              "330    108.50  126.26    6     3     0.00  -3.1\n",
              "331    114.00  175.67    7     3     3.22  -3.2\n",
              "332    200.65  200.65    8     4    27.99  -1.9\n",
              "333    213.39  213.39    9     3   126.73  -0.5\n",
              "334    200.65  200.65   10     2   209.49  -0.2\n",
              "335    185.08  185.08   11     3   228.66  -0.1\n",
              "336    335.83  179.84   12     2   219.21   0.1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5f4fe35-8307-4cd5-9783-f4354149f7f5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>324</th>\n",
              "      <td>23.50</td>\n",
              "      <td>74.15</td>\n",
              "      <td>24</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-6.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>325</th>\n",
              "      <td>105.25</td>\n",
              "      <td>105.25</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-2.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>84.93</td>\n",
              "      <td>84.93</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>79.08</td>\n",
              "      <td>79.08</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>89.99</td>\n",
              "      <td>89.99</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>120.01</td>\n",
              "      <td>120.01</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>108.50</td>\n",
              "      <td>126.26</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>114.00</td>\n",
              "      <td>175.67</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.22</td>\n",
              "      <td>-3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>27.99</td>\n",
              "      <td>-1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>213.39</td>\n",
              "      <td>213.39</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>126.73</td>\n",
              "      <td>-0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>209.49</td>\n",
              "      <td>-0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>185.08</td>\n",
              "      <td>185.08</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>228.66</td>\n",
              "      <td>-0.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>335.83</td>\n",
              "      <td>179.84</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>219.21</td>\n",
              "      <td>0.1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5f4fe35-8307-4cd5-9783-f4354149f7f5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e5f4fe35-8307-4cd5-9783-f4354149f7f5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e5f4fe35-8307-4cd5-9783-f4354149f7f5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 482
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZ9E2jORUh56",
        "outputId": "bac119c8-039f-4976-8216-fed597d8b81a"
      },
      "execution_count": 483,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13,)"
            ]
          },
          "metadata": {},
          "execution_count": 483
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "test_generator_test = TimeseriesGenerator(xtest_test, ytest_test, length=1, sampling_rate=1, batch_size=24)\n"
      ],
      "metadata": {
        "id": "7cfW7kV-Ujys"
      },
      "execution_count": 484,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "model.evaluate_generator(test_generator_test,verbose=0)\n",
        "predictions_test = model.predict_generator(test_generator_test)\n",
        "predictions_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ws7THi44UluT",
        "outputId": "e8b0c77f-3400-4cad-9a5a-4feaee2002ff"
      },
      "execution_count": 485,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-485-a271c5c4b549>:1: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
            "  model.evaluate_generator(test_generator_test,verbose=0)\n",
            "<ipython-input-485-a271c5c4b549>:2: UserWarning: `Model.predict_generator` is deprecated and will be removed in a future version. Please use `Model.predict`, which supports generators.\n",
            "  predictions_test = model.predict_generator(test_generator_test)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 485
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QoBuKEn4UnO4",
        "outputId": "50744f82-4477-4d2b-fe4b-44c6580d5e08"
      },
      "execution_count": 486,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13,)"
            ]
          },
          "metadata": {},
          "execution_count": 486
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest_test[:,1:][win_length:]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9pRKZReWUor2",
        "outputId": "77649718-27d5-4b4f-d0f8-9d0ef1108414"
      },
      "execution_count": 487,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([], shape=(0, 5), dtype=float64)"
            ]
          },
          "metadata": {},
          "execution_count": 487
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred_test=pd.concat([pd.DataFrame(predictions_test), pd.DataFrame(xtest_test[:,1:][win_length:])],axis=1)\n",
        "df_pred_test\n",
        "rev_trans_test=scaler.inverse_transform(df_pred_test)"
      ],
      "metadata": {
        "id": "rvdD9qbzUqQT"
      },
      "execution_count": 488,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rev_trans_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WbTe9Hg3UsF4",
        "outputId": "16199eb8-704c-4119-9ebd-2c9c62ee800a"
      },
      "execution_count": 489,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 489
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0202_final=df_test_0202_input[predictions_test.shape[0]*-1:]\n",
        "df_test_0202_final.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ITZNZB_HUtqK",
        "outputId": "75f43ba7-04e8-4937-cc74-3790a843e2e2"
      },
      "execution_count": 490,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "regprice    12\n",
              "price       12\n",
              "hour        12\n",
              "wind        12\n",
              "globrad     12\n",
              "temp        12\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 490
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0202_input[predictions_test.shape[0]*-1:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "xj4bJmItUvB1",
        "outputId": "7e5db9b2-70fa-47bd-bde3-d28ebb18ec4f"
      },
      "execution_count": 491,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     regprice   price hour  wind  globrad  temp\n",
              "325    105.25  105.25    1     2     0.00  -2.5\n",
              "326     84.93   84.93    2     4     0.00  -3.0\n",
              "327     79.08   79.08    3     4     0.00  -3.2\n",
              "328     89.99   89.99    4     4     0.00  -3.5\n",
              "329    120.01  120.01    5     4     0.00  -3.5\n",
              "330    108.50  126.26    6     3     0.00  -3.1\n",
              "331    114.00  175.67    7     3     3.22  -3.2\n",
              "332    200.65  200.65    8     4    27.99  -1.9\n",
              "333    213.39  213.39    9     3   126.73  -0.5\n",
              "334    200.65  200.65   10     2   209.49  -0.2\n",
              "335    185.08  185.08   11     3   228.66  -0.1\n",
              "336    335.83  179.84   12     2   219.21   0.1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fa098834-5489-41dd-8d19-69ff4c1f1c6d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>325</th>\n",
              "      <td>105.25</td>\n",
              "      <td>105.25</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-2.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>84.93</td>\n",
              "      <td>84.93</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>79.08</td>\n",
              "      <td>79.08</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>89.99</td>\n",
              "      <td>89.99</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>120.01</td>\n",
              "      <td>120.01</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>108.50</td>\n",
              "      <td>126.26</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>114.00</td>\n",
              "      <td>175.67</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.22</td>\n",
              "      <td>-3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>27.99</td>\n",
              "      <td>-1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>213.39</td>\n",
              "      <td>213.39</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>126.73</td>\n",
              "      <td>-0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>209.49</td>\n",
              "      <td>-0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>185.08</td>\n",
              "      <td>185.08</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>228.66</td>\n",
              "      <td>-0.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>335.83</td>\n",
              "      <td>179.84</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>219.21</td>\n",
              "      <td>0.1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa098834-5489-41dd-8d19-69ff4c1f1c6d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fa098834-5489-41dd-8d19-69ff4c1f1c6d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fa098834-5489-41dd-8d19-69ff4c1f1c6d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 491
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0202_final=df_test_0202_input[predictions_test.shape[0]*-1:]\n",
        "df_test_0202_final.count()\n",
        "df_test_0202_final['Regprice_Pred']=rev_trans_test[:,0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aWOnM4o_UwgE",
        "outputId": "da519616-2812-45d2-d096-d1fc0a16dd49"
      },
      "execution_count": 492,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-492-9b92261b53c2>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_test_0202_final['Regprice_Pred']=rev_trans_test[:,0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_final_test = df_test_0202_final\n",
        "\n",
        "df_final_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "ROPjNi5VUyBU",
        "outputId": "e4b2b9e4-fbfd-47db-f6de-c3b6ea291e91"
      },
      "execution_count": 493,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     regprice   price hour  wind  globrad  temp  Regprice_Pred\n",
              "325    105.25  105.25    1     2     0.00  -2.5      40.737402\n",
              "326     84.93   84.93    2     4     0.00  -3.0      41.228723\n",
              "327     79.08   79.08    3     4     0.00  -3.2      41.747156\n",
              "328     89.99   89.99    4     4     0.00  -3.5      43.972610\n",
              "329    120.01  120.01    5     4     0.00  -3.5      46.708783\n",
              "330    108.50  126.26    6     3     0.00  -3.1      54.337113\n",
              "331    114.00  175.67    7     3     3.22  -3.2      54.525598\n",
              "332    200.65  200.65    8     4    27.99  -1.9      47.631550\n",
              "333    213.39  213.39    9     3   126.73  -0.5      45.915951\n",
              "334    200.65  200.65   10     2   209.49  -0.2      44.014366\n",
              "335    185.08  185.08   11     3   228.66  -0.1      43.093566\n",
              "336    335.83  179.84   12     2   219.21   0.1      43.394471"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a219a116-d626-4248-8538-39c2f649cc42\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "      <th>Regprice_Pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>325</th>\n",
              "      <td>105.25</td>\n",
              "      <td>105.25</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-2.5</td>\n",
              "      <td>40.737402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>84.93</td>\n",
              "      <td>84.93</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.0</td>\n",
              "      <td>41.228723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>79.08</td>\n",
              "      <td>79.08</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.2</td>\n",
              "      <td>41.747156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>89.99</td>\n",
              "      <td>89.99</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.5</td>\n",
              "      <td>43.972610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>120.01</td>\n",
              "      <td>120.01</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.5</td>\n",
              "      <td>46.708783</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>108.50</td>\n",
              "      <td>126.26</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-3.1</td>\n",
              "      <td>54.337113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>114.00</td>\n",
              "      <td>175.67</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.22</td>\n",
              "      <td>-3.2</td>\n",
              "      <td>54.525598</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>27.99</td>\n",
              "      <td>-1.9</td>\n",
              "      <td>47.631550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>213.39</td>\n",
              "      <td>213.39</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>126.73</td>\n",
              "      <td>-0.5</td>\n",
              "      <td>45.915951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>200.65</td>\n",
              "      <td>200.65</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>209.49</td>\n",
              "      <td>-0.2</td>\n",
              "      <td>44.014366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>185.08</td>\n",
              "      <td>185.08</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>228.66</td>\n",
              "      <td>-0.1</td>\n",
              "      <td>43.093566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>335.83</td>\n",
              "      <td>179.84</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>219.21</td>\n",
              "      <td>0.1</td>\n",
              "      <td>43.394471</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a219a116-d626-4248-8538-39c2f649cc42')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a219a116-d626-4248-8538-39c2f649cc42 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a219a116-d626-4248-8538-39c2f649cc42');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 493
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation metrics \n",
        "\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# MAPE \n",
        "\n",
        "\n",
        "def mape(ytest, pred):\n",
        "    ytest, pred = np.array(ytest), np.array(pred)\n",
        "    mape = np.mean(np.abs((ytest - pred) / ytest))\n",
        "    return mape\n",
        "\n",
        "\n",
        "mape_calc = mape(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "# sMAPE def\n",
        "\n",
        "def smape(a, f):\n",
        "    return 1/len(a) * np.sum(2 * np.abs(f-a) / (np.abs(a) + np.abs(f))*100)\n",
        "\n",
        "\n",
        "    #sMAPE:\n",
        "# smape(actual, forecast)\n",
        "\n",
        "smape_calc = smape(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "#MAE\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae_calc = mean_absolute_error(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "#(actual, pred)\n",
        "\n",
        "\n",
        "#calculate RMSE\n",
        "rmse_calc = sqrt(mean_squared_error(df_final_test['regprice'], df_final_test['Regprice_Pred'])) \n",
        "\n",
        "import math\n",
        "\n",
        " \n",
        "MSE = np.square(np.subtract(df_final_test['regprice'],df_final_test['Regprice_Pred'])).mean() \n",
        " \n",
        "\n",
        "print(\"MSE:\", MSE)\n",
        "print(\"RMSE:\", rmse_calc)\n",
        "print(\"MAPE:\", mape_calc)\n",
        "print(\"sMAPE:\", smape_calc)\n",
        "print(\"MAE:\", mae_calc) \n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e_AvNe3lUzzc",
        "outputId": "923dabfd-705e-4270-cd2f-f71fb0837782"
      },
      "execution_count": 494,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE: 16925.210038451125\n",
            "RMSE: 130.09692555341624\n",
            "MAPE: 0.6423896918809148\n",
            "sMAPE: 97.69628476604558\n",
            "MAE: 107.50439253482347\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation: Correct prediction direction. \n",
        "\n",
        "real_spread = df_final_test['regprice'] - df_final_test['price']\n",
        "pred_spread = df_final_test['Regprice_Pred'] - df_final_test['price']\n",
        "\n",
        "real_spread = real_spread.values\n",
        "pred_spread = pred_spread.values\n",
        "\n",
        "\n",
        "df2_test = pd.DataFrame({'Hour' : df_final_test['hour'], 'Real spread' : real_spread, 'Predicted spread' : pred_spread})  \n",
        "display(df2_test)\n",
        "\n",
        "\n",
        "\n",
        "conditions = [\n",
        "    (df2_test['Real spread'] < 0) & (df2_test['Predicted spread']<0),\n",
        "    (df2_test['Real spread']> 0) & (df2_test['Predicted spread']>0),\n",
        "    (df2_test['Real spread']< 0) & (df2_test['Predicted spread']>0),\n",
        "    (df2_test['Real spread']> 0) & (df2_test['Predicted spread']<0),\n",
        "    (df2_test['Real spread']== 0) & (df2_test['Predicted spread']> -10) & (df2_test['Predicted spread']< 10)\n",
        "    ]\n",
        "\n",
        "# create a list of the values we want to assign for each condition\n",
        "values = [1, 1, 0, 0, 1]\n",
        "\n",
        "# create a new column and use np.select to assign values to it using our lists as arguments\n",
        "df2_test['Correct direction'] = np.select(conditions, values)\n",
        "\n",
        "# display updated DataFrame\n",
        "#df2.head()\n",
        "sum(df2_test['Correct direction'])/len(df2_test)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "V1x-JPNZU4VJ",
        "outputId": "8268ea2b-edd7-4618-b6f4-6dd034e69967"
      },
      "execution_count": 495,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    Hour  Real spread  Predicted spread\n",
              "325    1         0.00        -64.512598\n",
              "326    2         0.00        -43.701277\n",
              "327    3         0.00        -37.332844\n",
              "328    4         0.00        -46.017390\n",
              "329    5         0.00        -73.301217\n",
              "330    6       -17.76        -71.922887\n",
              "331    7       -61.67       -121.144402\n",
              "332    8         0.00       -153.018450\n",
              "333    9         0.00       -167.474049\n",
              "334   10         0.00       -156.635634\n",
              "335   11         0.00       -141.986434\n",
              "336   12       155.99       -136.445529"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0775e5e3-1a75-45e1-a915-7f8adcdee8c0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hour</th>\n",
              "      <th>Real spread</th>\n",
              "      <th>Predicted spread</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>325</th>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-64.512598</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>326</th>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-43.701277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>327</th>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-37.332844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>328</th>\n",
              "      <td>4</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-46.017390</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-73.301217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>330</th>\n",
              "      <td>6</td>\n",
              "      <td>-17.76</td>\n",
              "      <td>-71.922887</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>331</th>\n",
              "      <td>7</td>\n",
              "      <td>-61.67</td>\n",
              "      <td>-121.144402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>332</th>\n",
              "      <td>8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-153.018450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>333</th>\n",
              "      <td>9</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-167.474049</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>334</th>\n",
              "      <td>10</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-156.635634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>11</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-141.986434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>336</th>\n",
              "      <td>12</td>\n",
              "      <td>155.99</td>\n",
              "      <td>-136.445529</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0775e5e3-1a75-45e1-a915-7f8adcdee8c0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0775e5e3-1a75-45e1-a915-7f8adcdee8c0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0775e5e3-1a75-45e1-a915-7f8adcdee8c0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.16666666666666666"
            ]
          },
          "metadata": {},
          "execution_count": 495
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6 march\n",
        "df_test_0306=pd.read_csv(\"/content/test_SE3_spot_weather_0306.csv\", sep = ',')\n",
        "df_test_0306 = df_test_0306.replace(np. nan,0)\n",
        "\n",
        "\n",
        "df_test_0306['hour'] = df_test_0306['hour'].apply(str)\n",
        "#df_test_0306['hour'] = str(df_test_0306['hour'])\n",
        "df_test_0306['hour'] = df_test_0306['hour'].map(lambda x: x.lstrip('H'))\n",
        "\n",
        "\n",
        "df_test_0306['datetime'] = pd.to_datetime(df_test_0306['datetime'], infer_datetime_format=True)\n",
        "\n",
        "\n",
        "df_test_0306.drop(index=df_test_0306.index[:96], axis=0, inplace=True)\n",
        "df_test_0306.drop(index=df_test_0306.index[13:], axis=0, inplace=True)\n",
        "\n",
        "print(df)\n",
        "df_test_0306"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 700
        },
        "id": "7Bz2asDsWqid",
        "outputId": "03181d9f-2b4d-4e63-9fb7-b6ccb14e8fa9"
      },
      "execution_count": 496,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                datetime hour  price  regprice  temp  wind  globrad\n",
            "0    2022-01-01 00:00:00    1  46.60     46.60   0.7   2.0      0.0\n",
            "1    2022-01-01 01:00:00    2  41.33     41.33   0.4   2.0      0.0\n",
            "2    2022-01-01 02:00:00    3  42.18     42.18   0.7   3.0      0.0\n",
            "3    2022-01-01 03:00:00    4  44.37     44.37   0.7   5.0      0.0\n",
            "4    2022-01-01 04:00:00    5  37.67     37.67   0.3   5.0      0.0\n",
            "...                  ...  ...    ...       ...   ...   ...      ...\n",
            "8755 2022-12-31 19:00:00   20  15.08     15.08   4.8   1.0      0.0\n",
            "8756 2022-12-31 20:00:00   21  11.57      1.34   4.4   1.0      0.0\n",
            "8757 2022-12-31 21:00:00   22  14.89     -7.00   3.9   1.0      0.0\n",
            "8758 2022-12-31 22:00:00   23   9.94     -7.00   4.6   5.0      0.0\n",
            "8759 2022-12-31 23:00:00   24   4.84     -6.72   5.2   5.0      0.0\n",
            "\n",
            "[8760 rows x 7 columns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               datetime hour   price  regprice  temp  wind  globrad\n",
              "96  2023-03-05 23:00:00   24  117.72    140.00  -2.2     0     0.00\n",
              "97  2023-03-06 00:00:00    1  130.60    150.00  -4.3     8     0.00\n",
              "98  2023-03-06 01:00:00    2  118.52    118.52  -4.8     7     0.00\n",
              "99  2023-03-06 02:00:00    3  116.81    110.00  -5.1     6     0.00\n",
              "100 2023-03-06 03:00:00    4  117.60    140.00  -5.0     5     0.00\n",
              "101 2023-03-06 04:00:00    5  122.41    140.00  -5.0     6     0.08\n",
              "102 2023-03-06 05:00:00    6  137.44    137.44  -4.5     5     5.40\n",
              "103 2023-03-06 06:00:00    7  159.80    161.26  -3.7     6    48.02\n",
              "104 2023-03-06 07:00:00    8  185.00    235.00  -3.1     6   101.51\n",
              "105 2023-03-06 08:00:00    9  217.09    217.37  -2.1     6   183.56\n",
              "106 2023-03-06 09:00:00   10  189.99    189.99  -1.9     6   246.04\n",
              "107 2023-03-06 10:00:00   11  170.26    170.26  -1.7     5   300.21\n",
              "108 2023-03-06 11:00:00   12  160.84    112.50  -1.5     5   186.86"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a3833bb-3e7b-476f-99b6-d3d9bf0245a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>price</th>\n",
              "      <th>regprice</th>\n",
              "      <th>temp</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>2023-03-05 23:00:00</td>\n",
              "      <td>24</td>\n",
              "      <td>117.72</td>\n",
              "      <td>140.00</td>\n",
              "      <td>-2.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>2023-03-06 00:00:00</td>\n",
              "      <td>1</td>\n",
              "      <td>130.60</td>\n",
              "      <td>150.00</td>\n",
              "      <td>-4.3</td>\n",
              "      <td>8</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>2023-03-06 01:00:00</td>\n",
              "      <td>2</td>\n",
              "      <td>118.52</td>\n",
              "      <td>118.52</td>\n",
              "      <td>-4.8</td>\n",
              "      <td>7</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2023-03-06 02:00:00</td>\n",
              "      <td>3</td>\n",
              "      <td>116.81</td>\n",
              "      <td>110.00</td>\n",
              "      <td>-5.1</td>\n",
              "      <td>6</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>2023-03-06 03:00:00</td>\n",
              "      <td>4</td>\n",
              "      <td>117.60</td>\n",
              "      <td>140.00</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>2023-03-06 04:00:00</td>\n",
              "      <td>5</td>\n",
              "      <td>122.41</td>\n",
              "      <td>140.00</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>6</td>\n",
              "      <td>0.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>2023-03-06 05:00:00</td>\n",
              "      <td>6</td>\n",
              "      <td>137.44</td>\n",
              "      <td>137.44</td>\n",
              "      <td>-4.5</td>\n",
              "      <td>5</td>\n",
              "      <td>5.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>2023-03-06 06:00:00</td>\n",
              "      <td>7</td>\n",
              "      <td>159.80</td>\n",
              "      <td>161.26</td>\n",
              "      <td>-3.7</td>\n",
              "      <td>6</td>\n",
              "      <td>48.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>2023-03-06 07:00:00</td>\n",
              "      <td>8</td>\n",
              "      <td>185.00</td>\n",
              "      <td>235.00</td>\n",
              "      <td>-3.1</td>\n",
              "      <td>6</td>\n",
              "      <td>101.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>2023-03-06 08:00:00</td>\n",
              "      <td>9</td>\n",
              "      <td>217.09</td>\n",
              "      <td>217.37</td>\n",
              "      <td>-2.1</td>\n",
              "      <td>6</td>\n",
              "      <td>183.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2023-03-06 09:00:00</td>\n",
              "      <td>10</td>\n",
              "      <td>189.99</td>\n",
              "      <td>189.99</td>\n",
              "      <td>-1.9</td>\n",
              "      <td>6</td>\n",
              "      <td>246.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>2023-03-06 10:00:00</td>\n",
              "      <td>11</td>\n",
              "      <td>170.26</td>\n",
              "      <td>170.26</td>\n",
              "      <td>-1.7</td>\n",
              "      <td>5</td>\n",
              "      <td>300.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>2023-03-06 11:00:00</td>\n",
              "      <td>12</td>\n",
              "      <td>160.84</td>\n",
              "      <td>112.50</td>\n",
              "      <td>-1.5</td>\n",
              "      <td>5</td>\n",
              "      <td>186.86</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a3833bb-3e7b-476f-99b6-d3d9bf0245a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6a3833bb-3e7b-476f-99b6-d3d9bf0245a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6a3833bb-3e7b-476f-99b6-d3d9bf0245a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 496
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0306_input=df_test_0306[['regprice','price', 'hour',\"wind\", \"globrad\", \"temp\"]] \n",
        "scaler = MinMaxScaler()"
      ],
      "metadata": {
        "id": "xEpC82g8W8Bb"
      },
      "execution_count": 497,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_scaled=scaler.fit_transform(df_test_0306_input) # should this be changed or not? \n",
        "features_test = data_scaled\n",
        "target_test = data_scaled[:,0]\n",
        "TimeseriesGenerator(features_test,target_test,length=lookback,sampling_rate=1,batch_size=64)[0]\n",
        "xtrain_test,xtest_test,ytrain_test,ytest_test=train_test_split(features,target,test_size=13,random_state=123,shuffle=False) \n"
      ],
      "metadata": {
        "id": "_uw63J15W9pO"
      },
      "execution_count": 498,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0306_input"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "PiuSuGYFW_Yt",
        "outputId": "37d0ba49-58cc-47b6-c0c4-9aa93546bd5e"
      },
      "execution_count": 499,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     regprice   price hour  wind  globrad  temp\n",
              "96     140.00  117.72   24     0     0.00  -2.2\n",
              "97     150.00  130.60    1     8     0.00  -4.3\n",
              "98     118.52  118.52    2     7     0.00  -4.8\n",
              "99     110.00  116.81    3     6     0.00  -5.1\n",
              "100    140.00  117.60    4     5     0.00  -5.0\n",
              "101    140.00  122.41    5     6     0.08  -5.0\n",
              "102    137.44  137.44    6     5     5.40  -4.5\n",
              "103    161.26  159.80    7     6    48.02  -3.7\n",
              "104    235.00  185.00    8     6   101.51  -3.1\n",
              "105    217.37  217.09    9     6   183.56  -2.1\n",
              "106    189.99  189.99   10     6   246.04  -1.9\n",
              "107    170.26  170.26   11     5   300.21  -1.7\n",
              "108    112.50  160.84   12     5   186.86  -1.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3c00610-ff01-4478-841f-61e9d643d767\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>140.00</td>\n",
              "      <td>117.72</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>150.00</td>\n",
              "      <td>130.60</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-4.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>118.52</td>\n",
              "      <td>118.52</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-4.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>110.00</td>\n",
              "      <td>116.81</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-5.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>140.00</td>\n",
              "      <td>117.60</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>140.00</td>\n",
              "      <td>122.41</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>0.08</td>\n",
              "      <td>-5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>137.44</td>\n",
              "      <td>137.44</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>5.40</td>\n",
              "      <td>-4.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>161.26</td>\n",
              "      <td>159.80</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>48.02</td>\n",
              "      <td>-3.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>235.00</td>\n",
              "      <td>185.00</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>101.51</td>\n",
              "      <td>-3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>217.37</td>\n",
              "      <td>217.09</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>183.56</td>\n",
              "      <td>-2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>189.99</td>\n",
              "      <td>189.99</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>246.04</td>\n",
              "      <td>-1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>170.26</td>\n",
              "      <td>170.26</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>300.21</td>\n",
              "      <td>-1.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>112.50</td>\n",
              "      <td>160.84</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>186.86</td>\n",
              "      <td>-1.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3c00610-ff01-4478-841f-61e9d643d767')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3c00610-ff01-4478-841f-61e9d643d767 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3c00610-ff01-4478-841f-61e9d643d767');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 499
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ypyZJJtdXAwC",
        "outputId": "7c2fad90-a179-4a4a-e727-1d1960b4432f"
      },
      "execution_count": 500,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13,)"
            ]
          },
          "metadata": {},
          "execution_count": 500
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "test_generator_test = TimeseriesGenerator(xtest_test, ytest_test, length=1, sampling_rate=1, batch_size=24)\n"
      ],
      "metadata": {
        "id": "DHwnAWftXCE1"
      },
      "execution_count": 501,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate_generator(test_generator_test,verbose=0)\n",
        "predictions_test = model.predict_generator(test_generator_test)\n",
        "predictions_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CYvkiJGFXDin",
        "outputId": "06aad2f2-b919-4aed-d35b-4b804458440d"
      },
      "execution_count": 502,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-502-a271c5c4b549>:1: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
            "  model.evaluate_generator(test_generator_test,verbose=0)\n",
            "<ipython-input-502-a271c5c4b549>:2: UserWarning: `Model.predict_generator` is deprecated and will be removed in a future version. Please use `Model.predict`, which supports generators.\n",
            "  predictions_test = model.predict_generator(test_generator_test)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 502
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ytest_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0qrU0eQXFVr",
        "outputId": "18b8e871-6760-4190-9b96-319718f03b31"
      },
      "execution_count": 503,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13,)"
            ]
          },
          "metadata": {},
          "execution_count": 503
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xtest_test[:,1:][win_length:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Vpk_Ei1XHFw",
        "outputId": "c10d5d80-1a0c-4ba1-8fdd-1c5601a3be92"
      },
      "execution_count": 504,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([], shape=(0, 5), dtype=float64)"
            ]
          },
          "metadata": {},
          "execution_count": 504
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred_test=pd.concat([pd.DataFrame(predictions_test), pd.DataFrame(xtest_test[:,1:][win_length:])],axis=1)\n",
        "df_pred_test\n",
        "rev_trans_test=scaler.inverse_transform(df_pred_test)"
      ],
      "metadata": {
        "id": "0U7ruOkFXI-C"
      },
      "execution_count": 505,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rev_trans_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IuRR11gyXKkq",
        "outputId": "b4137ed6-5a9c-4476-d7ce-c7fbfe27e776"
      },
      "execution_count": 506,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 506
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0306_final=df_test_0306_input[predictions_test.shape[0]*-1:]\n",
        "df_test_0306_final.count()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N-hoYhR4XMSi",
        "outputId": "35e56bb3-cb2f-40ce-af79-65b9b39e01df"
      },
      "execution_count": 507,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "regprice    12\n",
              "price       12\n",
              "hour        12\n",
              "wind        12\n",
              "globrad     12\n",
              "temp        12\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 507
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0306_input[predictions_test.shape[0]*-1:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "VD-utcrbXONE",
        "outputId": "948ea504-02bb-46e5-c20b-77e7e28f882b"
      },
      "execution_count": 508,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     regprice   price hour  wind  globrad  temp\n",
              "97     150.00  130.60    1     8     0.00  -4.3\n",
              "98     118.52  118.52    2     7     0.00  -4.8\n",
              "99     110.00  116.81    3     6     0.00  -5.1\n",
              "100    140.00  117.60    4     5     0.00  -5.0\n",
              "101    140.00  122.41    5     6     0.08  -5.0\n",
              "102    137.44  137.44    6     5     5.40  -4.5\n",
              "103    161.26  159.80    7     6    48.02  -3.7\n",
              "104    235.00  185.00    8     6   101.51  -3.1\n",
              "105    217.37  217.09    9     6   183.56  -2.1\n",
              "106    189.99  189.99   10     6   246.04  -1.9\n",
              "107    170.26  170.26   11     5   300.21  -1.7\n",
              "108    112.50  160.84   12     5   186.86  -1.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd6173c7-6758-41e5-a24a-497f146ad097\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>150.00</td>\n",
              "      <td>130.60</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-4.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>118.52</td>\n",
              "      <td>118.52</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-4.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>110.00</td>\n",
              "      <td>116.81</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-5.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>140.00</td>\n",
              "      <td>117.60</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>140.00</td>\n",
              "      <td>122.41</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>0.08</td>\n",
              "      <td>-5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>137.44</td>\n",
              "      <td>137.44</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>5.40</td>\n",
              "      <td>-4.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>161.26</td>\n",
              "      <td>159.80</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>48.02</td>\n",
              "      <td>-3.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>235.00</td>\n",
              "      <td>185.00</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>101.51</td>\n",
              "      <td>-3.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>217.37</td>\n",
              "      <td>217.09</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>183.56</td>\n",
              "      <td>-2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>189.99</td>\n",
              "      <td>189.99</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>246.04</td>\n",
              "      <td>-1.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>170.26</td>\n",
              "      <td>170.26</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>300.21</td>\n",
              "      <td>-1.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>112.50</td>\n",
              "      <td>160.84</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>186.86</td>\n",
              "      <td>-1.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd6173c7-6758-41e5-a24a-497f146ad097')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bd6173c7-6758-41e5-a24a-497f146ad097 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bd6173c7-6758-41e5-a24a-497f146ad097');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 508
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test_0306_final=df_test_0306_input[predictions_test.shape[0]*-1:]\n",
        "df_test_0306_final.count()\n",
        "df_test_0306_final['Regprice_Pred']=rev_trans_test[:,0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lDPGIA6_XP1j",
        "outputId": "63964035-b47f-4b95-91dd-0cc1d35a729e"
      },
      "execution_count": 509,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-509-d147641d774e>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_test_0306_final['Regprice_Pred']=rev_trans_test[:,0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_final_test = df_test_0306_final\n",
        "\n",
        "df_final_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "uSoDZ5acXRev",
        "outputId": "3ab590a0-839e-4602-ef5f-74022c901b46"
      },
      "execution_count": 510,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     regprice   price hour  wind  globrad  temp  Regprice_Pred\n",
              "97     150.00  130.60    1     8     0.00  -4.3     116.898714\n",
              "98     118.52  118.52    2     7     0.00  -4.8     117.095349\n",
              "99     110.00  116.81    3     6     0.00  -5.1     117.302835\n",
              "100    140.00  117.60    4     5     0.00  -5.0     118.193501\n",
              "101    140.00  122.41    5     6     0.08  -5.0     119.288566\n",
              "102    137.44  137.44    6     5     5.40  -4.5     122.341559\n",
              "103    161.26  159.80    7     6    48.02  -3.7     122.416994\n",
              "104    235.00  185.00    8     6   101.51  -3.1     119.657874\n",
              "105    217.37  217.09    9     6   183.56  -2.1     118.971261\n",
              "106    189.99  189.99   10     6   246.04  -1.9     118.210213\n",
              "107    170.26  170.26   11     5   300.21  -1.7     117.841692\n",
              "108    112.50  160.84   12     5   186.86  -1.5     117.962120"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e89243c4-09fa-47c3-b6d7-6fa8bcbb56cc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>regprice</th>\n",
              "      <th>price</th>\n",
              "      <th>hour</th>\n",
              "      <th>wind</th>\n",
              "      <th>globrad</th>\n",
              "      <th>temp</th>\n",
              "      <th>Regprice_Pred</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>150.00</td>\n",
              "      <td>130.60</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-4.3</td>\n",
              "      <td>116.898714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>118.52</td>\n",
              "      <td>118.52</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-4.8</td>\n",
              "      <td>117.095349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>110.00</td>\n",
              "      <td>116.81</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-5.1</td>\n",
              "      <td>117.302835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>140.00</td>\n",
              "      <td>117.60</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>118.193501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>140.00</td>\n",
              "      <td>122.41</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>0.08</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>119.288566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>137.44</td>\n",
              "      <td>137.44</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>5.40</td>\n",
              "      <td>-4.5</td>\n",
              "      <td>122.341559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>161.26</td>\n",
              "      <td>159.80</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>48.02</td>\n",
              "      <td>-3.7</td>\n",
              "      <td>122.416994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>235.00</td>\n",
              "      <td>185.00</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>101.51</td>\n",
              "      <td>-3.1</td>\n",
              "      <td>119.657874</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>217.37</td>\n",
              "      <td>217.09</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>183.56</td>\n",
              "      <td>-2.1</td>\n",
              "      <td>118.971261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>189.99</td>\n",
              "      <td>189.99</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>246.04</td>\n",
              "      <td>-1.9</td>\n",
              "      <td>118.210213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>170.26</td>\n",
              "      <td>170.26</td>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>300.21</td>\n",
              "      <td>-1.7</td>\n",
              "      <td>117.841692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>112.50</td>\n",
              "      <td>160.84</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>186.86</td>\n",
              "      <td>-1.5</td>\n",
              "      <td>117.962120</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e89243c4-09fa-47c3-b6d7-6fa8bcbb56cc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e89243c4-09fa-47c3-b6d7-6fa8bcbb56cc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e89243c4-09fa-47c3-b6d7-6fa8bcbb56cc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 510
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation metrics \n",
        "\n",
        "\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# MAPE \n",
        "\n",
        "\n",
        "def mape(ytest, pred):\n",
        "    ytest, pred = np.array(ytest), np.array(pred)\n",
        "    mape = np.mean(np.abs((ytest - pred) / ytest))\n",
        "    return mape\n",
        "\n",
        "\n",
        "mape_calc = mape(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "# sMAPE def\n",
        "\n",
        "def smape(a, f):\n",
        "    return 1/len(a) * np.sum(2 * np.abs(f-a) / (np.abs(a) + np.abs(f))*100)\n",
        "\n",
        "\n",
        "    #sMAPE:\n",
        "# smape(actual, forecast)\n",
        "\n",
        "smape_calc = smape(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "#MAE\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "mae_calc = mean_absolute_error(df_final_test['regprice'], df_final_test['Regprice_Pred'])\n",
        "\n",
        "#(actual, pred)\n",
        "\n",
        "\n",
        "#calculate RMSE\n",
        "rmse_calc = sqrt(mean_squared_error(df_final_test['regprice'], df_final_test['Regprice_Pred'])) \n",
        "\n",
        "import math\n",
        "\n",
        " \n",
        "MSE = np.square(np.subtract(df_final_test['regprice'],df_final_test['Regprice_Pred'])).mean() \n",
        " \n",
        "\n",
        "print(\"MSE:\", MSE)\n",
        "print(\"RMSE:\", rmse_calc)\n",
        "print(\"MAPE:\", mape_calc)\n",
        "print(\"sMAPE:\", smape_calc)\n",
        "print(\"MAE:\", mae_calc) \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OoGOf4m-XTNC",
        "outputId": "98aa7a17-8895-46bf-c7fb-b56c25efbc62"
      },
      "execution_count": 511,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE: 2892.354549576284\n",
            "RMSE: 53.78061499812255\n",
            "MAPE: 0.219269989202354\n",
            "sMAPE: 26.298343402889856\n",
            "MAE: 40.14076930378874\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluation: Correct prediction direction. \n",
        "\n",
        "real_spread = df_final_test['regprice'] - df_final_test['price']\n",
        "pred_spread = df_final_test['Regprice_Pred'] - df_final_test['price']\n",
        "\n",
        "real_spread = real_spread.values\n",
        "pred_spread = pred_spread.values\n",
        "\n",
        "\n",
        "df2_test = pd.DataFrame({'Hour' : df_final_test['hour'], 'Real spread' : real_spread, 'Predicted spread' : pred_spread})  \n",
        "display(df2_test)\n",
        "\n",
        "\n",
        "\n",
        "conditions = [\n",
        "    (df2_test['Real spread'] < 0) & (df2_test['Predicted spread']<0),\n",
        "    (df2_test['Real spread']> 0) & (df2_test['Predicted spread']>0),\n",
        "    (df2_test['Real spread']< 0) & (df2_test['Predicted spread']>0),\n",
        "    (df2_test['Real spread']> 0) & (df2_test['Predicted spread']<0),\n",
        "    (df2_test['Real spread']== 0) & (df2_test['Predicted spread']> -10) & (df2_test['Predicted spread']< 10)\n",
        "    ]\n",
        "\n",
        "# create a list of the values we want to assign for each condition\n",
        "values = [1, 1, 0, 0, 1]\n",
        "\n",
        "# create a new column and use np.select to assign values to it using our lists as arguments\n",
        "df2_test['Correct direction'] = np.select(conditions, values)\n",
        "\n",
        "# display updated DataFrame\n",
        "#df2.head()\n",
        "sum(df2_test['Correct direction'])/len(df2_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "ie0BlR3vXWk6",
        "outputId": "c12037c6-2d3b-4a4a-91be-04331ef9462d"
      },
      "execution_count": 512,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    Hour  Real spread  Predicted spread\n",
              "97     1        19.40        -13.701286\n",
              "98     2         0.00         -1.424651\n",
              "99     3        -6.81          0.492835\n",
              "100    4        22.40          0.593501\n",
              "101    5        17.59         -3.121434\n",
              "102    6         0.00        -15.098441\n",
              "103    7         1.46        -37.383006\n",
              "104    8        50.00        -65.342126\n",
              "105    9         0.28        -98.118739\n",
              "106   10         0.00        -71.779787\n",
              "107   11         0.00        -52.418308\n",
              "108   12       -48.34        -42.877880"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9e883c5-cb6a-49f1-b74d-5e3e1d43ed94\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hour</th>\n",
              "      <th>Real spread</th>\n",
              "      <th>Predicted spread</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1</td>\n",
              "      <td>19.40</td>\n",
              "      <td>-13.701286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-1.424651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>3</td>\n",
              "      <td>-6.81</td>\n",
              "      <td>0.492835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>100</th>\n",
              "      <td>4</td>\n",
              "      <td>22.40</td>\n",
              "      <td>0.593501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>5</td>\n",
              "      <td>17.59</td>\n",
              "      <td>-3.121434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>6</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-15.098441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>7</td>\n",
              "      <td>1.46</td>\n",
              "      <td>-37.383006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>104</th>\n",
              "      <td>8</td>\n",
              "      <td>50.00</td>\n",
              "      <td>-65.342126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>105</th>\n",
              "      <td>9</td>\n",
              "      <td>0.28</td>\n",
              "      <td>-98.118739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>10</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-71.779787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>11</td>\n",
              "      <td>0.00</td>\n",
              "      <td>-52.418308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>12</td>\n",
              "      <td>-48.34</td>\n",
              "      <td>-42.877880</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9e883c5-cb6a-49f1-b74d-5e3e1d43ed94')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a9e883c5-cb6a-49f1-b74d-5e3e1d43ed94 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a9e883c5-cb6a-49f1-b74d-5e3e1d43ed94');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.25"
            ]
          },
          "metadata": {},
          "execution_count": 512
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "plt.plot(df_final_test['regprice'], label='Regulating price', linewidth=1)\n",
        "plt.plot(df_final_test['Regprice_Pred'], label='Predicted regulating price', linewidth=1, color=\"black\")\n",
        "plt.plot(df_final_test['price'], label='Spotprice', linewidth=1)\n",
        "\n",
        "\n",
        "# naming of x-axis and y-axis\n",
        "plt.xlabel(\"Time\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.title(\"Predicted regulating prices in SE3 December 2022\")\n",
        "x = list(range(8016,8760,1))\n",
        "#labels = labels = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'H10', 'H11', 'H12', 'H13', 'H14', 'H15','H16', 'H17', 'H18', 'H19', 'H20', 'H21', 'H22', 'H23', 'H24']\n",
        "plt.legend(loc=\"upper right\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 785
        },
        "id": "m1u4SmRjLHNp",
        "outputId": "528ae490-560c-4833-ba7d-7f3bc7695b75"
      },
      "execution_count": 513,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fddbc12ff70>"
            ]
          },
          "metadata": {},
          "execution_count": 513
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}